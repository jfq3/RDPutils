otu <- import_biom(BIOMfilename = "otu_03_table_only.json", parseFunction = parse_taxonomy_usearch)
head(otu)
class(otu)
rdp_tax <- make_tax_table(in_file = "rdp_classified_03.txt", confidence = 0.8)
head(rdp_tax)
rank_names(rdp_tax)
taxa_names(rdp_tax)
class(rdp_tax)
u_tax <- import_utax_file(in_file = "utax_tax_table_03.txt", confidence = 0.8)
head(u_tax)
class(u_tax)
s_tax <- import_sintax_file(in_file = "sintax_tax_table.txt", confidence = 0.8)
head(s_tax)
class(s_tax)
otu_tax <- import_otutab_taxa(in_file = "otu_03_tax_table.txt")
otu_tax
head(otu_table(otu_tax))
head(tax_table(otu_tax))
biom_otu_tax <- import_biom("otu_03_tax_table.json", parseFunction = parse_taxonomy_usearch)
biom_otu_tax
my_seqs <- readDNAStringSet("otus_03.fa", format = "fasta")
my_seqs
my_tree <- read_tree("usearch_03_tree.nwk", errorIfNULL = TRUE)
my_tree
expt <- phyloseq(my_otu, my_tax, my_tree, my_seqs)
expt
my_seqs <- readDNAStringSet("otus_03.fa", format = "fasta")
my_seqs
my_tree <- read_tree("usearch_03_tree.nwk", errorIfNULL = TRUE)
my_tree
expt <- phyloseq(my_otu, s_tax, my_tree, my_seqs)
expt
library(phyloseq)
?phyloseq
?`sample_data)
)
keep <- (sort(taxa_sums(expt)), decreasing = TRUE)[1:20]
keep <- sort(taxa_sums(expt), decreasing = TRUE)[1:20]
keep
keep <- sort(taxa_sums(expt), decreasing = TRUE)[1:20]
expt.top.20 <- prune_taxa(keep, expt)
tax_table(expt.top.20) <- rdp_tax
expt.top.20
library(phyloseq)
keep
names(keep)
keep <- names(sort(taxa_sums(expt), decreasing = TRUE)[1:20])
expt.top.20 <- prune_taxa(keep, expt)
tax_table(expt.top.20) <- rdp_tax
expt.top.20
head(tax_table(expt))
head(tax_table(expt.top.20))
expt
data(RDPutils)
file.path <- system.file("extdata", package = "RDPutils")
file.path
file.path <- system.file("extdata", package = "RDPutils")
suppressWarnings(suppressMessages(library(phyloseq)))
suppressWarnings(suppressMessages(library(RDPutils)))
suppressWarnings(suppressMessages(library(Biostrings)))
otu <- read.table(file = "file.path/otu_03_table_only.txt", header = TRUE, row.names = 1,
sep = '\t', comment.char = "")
head(otu)
my_otu <- otu_table(otu, taxa_are_rows = TRUE, errorIfNULL = TRUE)
class(my_otu)
file = "file.path/otu_03_table_only.txt"
file
file = "file.path/otu_03_table_only.txt"
file
getwd()
setwd(system.file("extdata", package = "RDPutils"))
suppressWarnings(suppressMessages(library(phyloseq)))
suppressWarnings(suppressMessages(library(RDPutils)))
suppressWarnings(suppressMessages(library(Biostrings)))
otu <- read.table(file = "otu_03_table_only.txt", header = TRUE, row.names = 1,
sep = '\t', comment.char = "")
head(otu)
my_otu <- otu_table(otu, taxa_are_rows = TRUE, errorIfNULL = TRUE)
class(my_otu)
library(RDPutils)
devtools::install(build_vignettes = TRUE)
library(RDPutils)
# setwd(system.file("extdata", package = "RDPutils"))
suppressWarnings(suppressMessages(library(phyloseq)))
suppressWarnings(suppressMessages(library(RDPutils)))
suppressWarnings(suppressMessages(library(Biostrings)))
otu <- read.table(file = "otu_03_table_only.txt", header = TRUE, row.names = 1,
sep = '\t', comment.char = "")
head(otu)
my_otu <- otu_table(otu, taxa_are_rows = TRUE, errorIfNULL = TRUE)
class(my_otu)
otu <- import_otutab_taxa(in_file = "otu_03_table_only.txt")
head(otu)
class(otu)
data(RDPutils)
devtools::build()
getwd()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(RDPutils)
?vignettes(RDPutils)
vignettes(RDPutils)
vignette(RDPutils)
vignette(package = "RDPutils")
head(u_tax)
devtools::build_vignettes()
library(RDPutils)
?RDPutils
library(RDPutils)
load(sam.data.rda)
load("C:/R_My_Packages/RDPutils/data/sam.data.rda")
View(sam.data)
load("sam_data.rda")
load("sam.data.rda")
sam.data
biom_otu_tax <- import_biom("otu_03_tax_table.json", parseFunction = parse_taxonomy_usearch)
biom_otu_tax
my_seqs <- readDNAStringSet("otus_03.fa", format = "fasta")
my_seqs
my_tree <- read_tree("usearch_03_tree.nwk", errorIfNULL = TRUE)
my_tree
load("sam.data.rda")
sam.data
my_sam <- sample_data(sam.data, errorIfNULL = TRUE)
expt <- phyloseq(my_otu, s_tax, my_tree, my_seqs)
expt
expt <- phyloseq(my_otu, my_sam, s_tax, my_tree, my_seqs)
expt
keep <- names(sort(taxa_sums(expt), decreasing = TRUE)[1:20])
expt.top.20 <- prune_taxa(keep, expt)
tax_table(expt.top.20) <- rdp_tax
expt.top.20
head(tax_table(expt))
head(tax_table(expt.top.20))
devtools::build()
data(RDPutils)
load("C:/R_My_Packages/RDPutils/data/sam.data.rda")
View(sam.data)
write.table(sam.data, file = "sam.data.txt", sep = "/t")
getwd()
sam.data <- read.table(file = "sam.data.txt", header = TRUE, row.names = 1, sep = "/t")
sam.data <- read.table(file = "sam.data.txt", header = TRUE, row.names = 1, sep = "/t")
otu_tax <- import_otutab_taxa(in_file = "otu_03_tax_table.txt")
otu_tax
head(otu_table(otu_tax))
head(tax_table(otu_tax))
biom_otu_tax <- import_biom("otu_03_tax_table.json", parseFunction = parse_taxonomy_usearch)
biom_otu_tax
my_seqs <- readDNAStringSet("otus_03.fa", format = "fasta")
my_seqs
read.table(file = "sam.data.txt", header = TRUE, row.names = 1, sep = "\t")
sam.data <- read.table(file = "sam.data.txt", header = TRUE, row.names = 1, sep = "\t")
my_sam <- sample_data(sam.data, errorIfNULL = TRUE)
otu <- read.table(file = "otu_03_table_only.txt", header = TRUE, row.names = 1,
sep = '\t', comment.char = "")
my_tree <- read_tree("usearch_03_tree.nwk", errorIfNULL = TRUE)
my_tree
sam.data
my_sam
expt <- phyloseq(my_otu, my_sam, s_tax, my_tree, my_seqs)
expt
my_sam <- sample_data(sam.data, errorIfNULL = TRUE)
my_sam
expt <- phyloseq(my_otu, my_sam, s_tax, my_tree, my_seqs)
expt
sample_data(expt)
getwd()
devtools::build()
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
library(RDPutils)
?RDPutils
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
warnings()
library(RDPutils)
?RDPutils
suppressWarnings(suppressMessages(library(phyloseq)))
suppressWarnings(suppressMessages(library(RDPutils)))
suppressWarnings(suppressMessages(library(Biostrings)))
otu <- read.table(file = "otu_03_table_only.txt", header = TRUE, row.names = 1,
sep = '\t', comment.char = "")
head(otu)
my_otu <- otu_table(otu, taxa_are_rows = TRUE, errorIfNULL = TRUE)
class(my_otu)
setwd("C:/R_My_Packages/RDPutils/vignettes")
sam.data <- read.table(file = "sam.data.txt", header = TRUE, row.names = 1, sep = "\t")
sam.data
load("C:/R_My_Packages/RDPutils/data/sam.data.rda")
load("C:/R_My_Packages/RDPutils/data/sam.data.rda")
View(sam.data)
library(RDPutils)
expt <- import_itagger_otutab_taxa(in_file = "C:/R_My_Packages/RDPutils/inst/extdata/itagger_file.tsv.txt")
library(RDPutils)
expt <- import_itagger_otutab_taxa(in_file = "C:/R_My_Packages/RDPutils/inst/extdata/itagger_file.tsv.txt")
expt
taxa_names(expt)
expt <- hier2phyloseq(in_file = "C:/R_My_Packages/RDPutils/inst/extdata/test_hier.txt")
expt <- hier2phyloseq("C:/R_My_Packages/RDPutils/inst/extdata/test_hier.txt")
taxa_names(expt)
seq_len(10)
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
hier_file
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
hier.file
hier_file = hier.file
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
# colnames(taxa) <- taxa[1,]
head(taxa)
taxa[, 1]
temp <- make_otu_names(seq_len(nrow(taxa)))
temp
nrow(taxa)
colnames(taxa) <- make_otu_names(seq_len(nrow(taxa)))
taxa <- taxa[-1,]
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
exp
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
rownames(taxa) <- make_otu_names(seq_len(nrow(taxa)))
taxa <- taxa[-1,]
all.ranks <- unique(taxa$rank)
possible.ranks <- c("rootrank", "kingdom", "domain","phylum","class", "order", "family", "genus", "species", "Rootrank", "Kingdom", "Domain","Phylum","Class", "Order", "Family", "Genus", "Species")
actual.ranks <- intersect(all.ranks, possible.ranks)
n.ranks <- length(actual.ranks)
last.rank <- actual.ranks[n.ranks]
head(taxa)
seq(1:nrow(taxa)-1)
rownames(taxa) <- c("OTU#", make_otu_names(seq(1:nrow(taxa)-1)))
temp <- c("OTU#", make_otu_names(seq(1:nrow(taxa)-1)))
temp
temp <- c("OTU#", make_otu_names(seq(1:nrow(taxa)-1)))
rownames(taxa) <- temp
nrow(taxa)
length(temp)
make_otu_names(seq(1:nrow(taxa)-1))
nrow(taxa)
length(temp)
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
dim(taxa)
rownames(taxa)
rownames(taxa)[1:10]
taxa[1, ]
taxa[ , 1]
length(rownames(taxa))
length(temp)
rownames(taxa) <- temp
taxa[1:5, ]
taxa <- taxa[-1,]
taxa[1:5, ]
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
# colnames(taxa) <- taxa[1,]
rownames(taxa) <- c("OTU#", make_otu_names(seq(1:nrow(taxa)-1)))
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
nrow(taxa)
length(c("OTU#", make_otu_names(seq(1:nrow(taxa)-1))))
length(make_otu_names(seq(1:(nrow(taxa)-1)))))
c("OTU#", make_otu_names(seq(1:(nrow(taxa)-1))))
c("OTU#", make_otu_names(seq(1:(nrow(taxa)-1))))[1:10]
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
# colnames(taxa) <- taxa[1,]
rownames(taxa) <- c("OTU#", make_otu_names(seq(1:(nrow(taxa)-1))))
taxa <- taxa[-1,]
dim(taxa)
rownames(taxa)[1:10]
rownames(taxa)
unique(taxa$rank)
colnames(taxa)
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
colnames(taxa) <- taxa[1,]
taxa <- taxa[-1,]
rownames(taxa) <-make_otu_names(seq_len(nrow(taxa)))
taxa[1:5, ]
all.ranks <- unique(taxa$rank)
possible.ranks <- c("rootrank", "kingdom", "domain","phylum","class", "order", "family", "genus", "species", "Rootrank", "Kingdom", "Domain","Phylum","Class", "Order", "Family", "Genus", "Species")
actual.ranks <- intersect(all.ranks, possible.ranks)
n.ranks <- length(actual.ranks)
last.rank <- actual.ranks[n.ranks]
last.rank
n.ranks
actual.ranks
taxa <- taxa[taxa$rank %in% c(last.rank, ""), ]
my.table <- matrix("", n.ranks, nrow=nrow(taxa))
colnames(my.table) <- actual.ranks
# rownames(my.table) <- paste("ID_", as.character(taxa[,1]), sep="")
rownames(my.table) <- rownames(taxa)
rank.names <- colnames(my.table)
for (k in 1:ncol(my.table)){
for (i in 1:nrow(my.table)) {
my.line <- unlist(strsplit(taxa[i,2],";"))
if (rank.names[k] %in% my.line) {
j <- which(my.line==rank.names[k])
level.name <- my.line[j-1]
my.table[i,k] <- level.name
}
}
}
# Fill in empty cells in classfication table with"unclass_higher rank".
for (i in 1:nrow(my.table)) {
for (j in 2:ncol(my.table)) {
if (my.table[i,j]=="") {
if (substr(my.table[i,j-1],1,7)=="unclass") {my.table[i,j]<-my.table[i,j-1]}
else {my.table[i,j]<- paste("unclass_", my.table[i,j-1], sep="")}
}
}
}
rank.names <- sapply(rank.names, simple_cap)
colnames(my.table) <- rank.names
otu <- taxa[ , -c(1:4)]
# rownames(otu) <- paste("ID_", as.character(taxa[,1]), sep="")
rownames(otu) <- rownames(taxa)
otu[] <- lapply(otu, as.numeric)
sam.names <- colnames(otu)
sam.names <- gsub("nc_", "", sam.names, fixed=TRUE)
sam.names <- gsub("_trimmed", "", sam.names, fixed=TRUE)
sam.names <- gsub("aligned_", "", sam.names, fixed=TRUE)
sam.names <- gsub(".fasta","", sam.names, fixed=TRUE)
sam.names <- gsub(".fastq","", sam.names, fixed=TRUE)
sam.names <- gsub("_",".", sam.names, fixed=TRUE)
colnames(otu) <- sam.names
my.tax <- tax_table(my.table, errorIfNULL=TRUE)
my.otu <- otu_table(as.matrix(otu), taxa_are_rows=TRUE, errorIfNULL=TRUE)
my.expt <- phyloseq(my.otu, my.tax)
my.expt
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
rm(expt)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
taxa_names(expt)
taxa_names(expt)[1:10]
sort(taxa_names(expt))
sort(taxa_names(expt))[1:10]
"OTU_0001" %in% taxa_names(expt)
"OTU_0002" %in% taxa_names(expt)
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
taxa_names(expt)
taxa_names(expt)[1:10]
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
rm(expt)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
library(RDPutils)
library(devtools)
install_github("hadley/dplyr")
library(RDPutils)
library(reshap2)
library(phyloseq)
library(githubinstall)
githubinstall("RDPutils")
?RDPutils
githubinstall("RDPutils", ask = TRUE, ref = "master", build_vignettes = TRUE, dependencies = TRUE, verbose = TRUE, force = TRUE)
Y
githubinstall("RDPutils", ask = TRUE, ref = "master", build_vignettes = TRUE, dependencies = TRUE, verbose = TRUE, force = TRUE)
?RDPutils
?RDPutils
install.packages("C:/R_My_Packages/RDPutils_1.3.0.zip", repos = NULL, type = "win.binary")
library(RDPutils)
assoc_repseq_IDs_with_otus_by_fasta("C:/tutorials/trimmed_rep_seqs.fasta", otu_format = "cluster")
temp.table <- assoc_repseq_IDs_with_otus_by_fasta("C:/tutorials/trimmed_rep_seqs.fasta", otu_format = "cluster")
temp.table <- assoc_repseq_IDs_with_otus_by_fasta("C:/tutorials/trimmed_rep_seqs.fasta", otu_format = "R")
temp.table <- assoc_repseq_IDs_with_otus_by_fasta("C:/tutorials/trimmed_rep_seqs.fasta", otu_format == "cluster")
library(RDPutils)
temp.table <- assoc_repseq_IDs_with_otus_by_fasta("C:/tutorials/trimmed_rep_seqs.fasta", otu_format == "cluster")
temp.table <- assoc_repseq_IDs_with_otus_by_fasta("C:/tutorials/trimmed_rep_seqs.fasta", otu_format = "cluster")
repseq_file="c:/tutorials/all_seq_complete.clust_rep_seqs.fasta"
fasta <- read.delim(file=repseq_file, header=FALSE, sep="\t", as.is=TRUE)
repseq_file=""C:/tutorials/trimmed_rep_seqs.fasta""
fasta <- read.delim(file=repseq_file, header=FALSE, sep="\t", as.is=TRUE)
temp.table <- assoc_repseq_IDs_with_otus_by_fasta("C:/tutorials/trimmed_rep_seqs.fasta", otu_format = "cluster")
library(RDPutils)
temp.table <- assoc_repseq_IDs_with_otus_by_fasta("C:/tutorials/trimmed_rep_seqs.fasta", otu_format = "cluster")
repseq_file=""C:/tutorials/trimmed_rep_seqs.fasta""
repseq_file=""C:/tutorials/trimmed_rep_seqs.fasta""
repseq_file="C:/tutorials/trimmed_rep_seqs.fasta"
fasta <- read.delim(file=repseq_file, header=FALSE, sep="\t", as.is=TRUE)
keep <- seq(from=1, to=(nrow(fasta)), by=2)
fasta <- fasta[keep,]
n.equals <- count_char_occurrences(char="=", strng_x=fasta[1])
n.equals
fasta
assoc_repseq_IDs_with_otus_by_fasta(repseq_file="C:/tutorials/tutorial_reps_rep_seqs.fasta", otu_format = "cluster")
temp.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file="C:/tutorials/tutorial_reps_rep_seqs.fasta", otu_format = "cluster")
head(temp.table)
temp.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file="C:/tutorials/tutorial_reps_rep_seqs.fasta", otu_format = "R")
head(temp.table)
repseq_file="C:/tutorials/tutorial_reps_rep_seqs.fasta"
fasta <- read.delim(file=repseq_file, header=FALSE, sep="\t", as.is=TRUE)
head(fasta)
head(fasta)
keep <- seq(from=1, to=(nrow(fasta)), by=2)
keep
fasta <- fasta[keep,]
fasta <- read.delim(file=repseq_file, header=FALSE, sep="\t", as.is=TRUE)
keep <- seq(from=1, to=(nrow(fasta)), by=2)
fasta <- fasta[keep,]
n.equals <- count_char_occurrences(char="=", strng_x=fasta[1])
n.equals
otu_format <- "R"
if(n.equals==5) {
# Extract fields, separate by commas.
fasta.sub  <- sub(">(\\w+)\\s+[a-z=,]+(\\d+)[a-z,=]+(\\d+)[a-zA-Z,=]+([0-9.]+)[a-zA-Z,=]+([0-9.]+)", "\\1, \\2, \\3, \\4, \\5", fasta, perl=TRUE);
assoc.table <- strsplit(fasta.sub, ", ", fixed=TRUE)
# Convert the results from lists to a data frame.
assoc.table <- as.data.frame(assoc.table)
assoc.table <- t(assoc.table)
rownames(assoc.table) <- NULL
assoc.table <- as.data.frame(assoc.table)
# Convert the variable types from type factor.
# First convert all to character
assoc.table[] <- lapply(assoc.table[], as.character)
# Then convert columns 2 & 3 to integer. If not done in this order, chaos.
i <- c(FALSE, TRUE, TRUE, FALSE, FALSE)
assoc.table[i] <- lapply(assoc.table[i], as.integer)
i <- c(FALSE, FALSE, FALSE, TRUE, TRUE)
# Convert columns 4 and 5 to numeric.
assoc.table[i] <- lapply(assoc.table[i], as.numeric)
# Add column names.
colnames(assoc.table) <- c("RepSeq.ID", "Cluster #", "Cluster size", "MaxDist", "minSS")
# Add OTU names
assoc.table$OTU <- as.character(make_otu_names(assoc.table[,2]), otu_format=otu_format)
# Reorder columns
assoc.table <- assoc.table[,c(1,6,2,3,4,5)]
}
else {
# Extract sequence ID, cluster number, number of sequences from each header.
fasta.sub <- sub(">(\\w+)\\s+[a-z=,_]+(\\d+)[a-z,=]+(\\d+)", "\\1, \\2, \\3", fasta, perl=TRUE);
assoc.table <- strsplit(fasta.sub, ", ", fixed=TRUE)
# Convert the results from lists to a data frame.
assoc.table <- as.data.frame(assoc.table)
assoc.table <- t(assoc.table)
rownames(assoc.table) <- NULL
assoc.table <- as.data.frame(assoc.table)
# Convert the variable types from type factor.
# First convert all to character
assoc.table[] <- lapply(assoc.table[], as.character)
# Then convert columns 2 & 3 to integer. If not done in this order, chaos.
i <- c(FALSE, TRUE, TRUE)
assoc.table[i] <- lapply(assoc.table[i], as.integer)
# Add column names.
colnames(assoc.table) <- c("RepSeq.ID", "Cluster #", "Cluster size")
# Add OTU names
assoc.table$OTU <- as.character(make_otu_names(assoc.table[,2], otu_format = otu_format))
# Reorder columns
assoc.table <- assoc.table[,c(1,4,2,3)]
}
fasta.sub  <- sub(">(\\w+)\\s+[a-z=,]+(\\d+)[a-z,=]+(\\d+)[a-zA-Z,=]+([0-9.]+)[a-zA-Z,=]+([0-9.]+)", "\\1, \\2, \\3, \\4, \\5", fasta, perl=TRUE);
assoc.table <- strsplit(fasta.sub, ", ", fixed=TRUE)
assoc.table <- as.data.frame(assoc.table)
assoc.table <- t(assoc.table)
rownames(assoc.table) <- NULL
assoc.table <- as.data.frame(assoc.table)
assoc.table
head(assoc.table)
assoc.table[] <- lapply(assoc.table[], as.character)
i <- c(FALSE, TRUE, TRUE, FALSE, FALSE)
assoc.table[i] <- lapply(assoc.table[i], as.integer)
i <- c(FALSE, FALSE, FALSE, TRUE, TRUE)
assoc.table[i] <- lapply(assoc.table[i], as.numeric)
colnames(assoc.table) <- c("RepSeq.ID", "Cluster #", "Cluster size", "MaxDist", "minSS")
head(assoc.table)
assoc.table$OTU <- as.character(make_otu_names(assoc.table[,2]), otu_format=otu_format)
head(assoc.table)
otu_format <- "cluster"
assoc.table$OTU <- as.character(make_otu_names(assoc.table[,2]), otu_format=otu_format)
head(assoc.table)
otu_format
as.character(make_otu_names(assoc.table[,2]), otu_format=otu_format)
as.character(make_otu_names(assoc.table[,2]), otu_format="cluster")
as.character(make_otu_names(assoc.table[,2]), otu_format="R")
as.character(make_otu_names(assoc.table[,2]), otu_format="cluster")
make_otu_names <-
function(otu_nums, otu_format="R") {
new.clstr.name <- matrix("",length(otu_nums),1)
if(otu_format=="R") {
n <- nchar(as.character(max(otu_nums)))
for (i in 1:length(otu_nums)) {
k <- nchar(as.character(otu_nums[i]))
k <- n-k
if (k==0) {pad<-""} else {
pad <- ""
for (j in 1:k) {
pad <- ""
for (j in 1:k){
pad <- paste(pad, "0", sep="")
}
}
}
new.clstr.name[i,1] <- paste("OTU_", pad, as.character(otu_nums[i]), sep="")
}
} else {
for (i in 1:length(otu_nums)) {
new.clstr.name[i,1] <- paste("cluster_", as.character(otu_nums[i]), sep="")
}
}
return(new.clstr.name)
}
as.character(make_otu_names(assoc.table[,2]), otu_format="cluster")
