identical(assoc.table.clstr[,1:3], assoc.table.fasta[,1:3]) # FALSE
my.otu <- clstr2otu(clstr_file="all_seq_complete.clust", dist=0.03, OutFile=TRUE, file.name= "dist_03.clust")
my.otu[ , 1:5]
# First get machine names of the representative sequences:
# By parsing fasta IDs:
rep.seqs <- get_repseq_IDs_from_fasta(repseq_file = "all_seq_complete.clust_rep_seqs.fasta")
rep.seqs[1:20]
# Then make the association table, first by parsing the cluster file:
assoc.table.clstr <- assoc_repseq_IDs_with_otus(clstr_file="dist_03.clust", rep_seqs=rep.seqs)
head(assoc.table.clstr)
# Then make the association table by parsing the fasta file IDs:
assoc.table.fasta <- assoc_repseq_IDs_with_clstrs_from_fasta(repseq_file="all_seq_complete.clust_rep_seqs.fasta")
head(assoc.table.fasta)
# Make sure they are in the same column order.
assoc.table.clstr <- assoc.table.clstr[order(assoc.table.clstr[,3]),]
assoc.table.fasta <- assoc.table.fasta[order(assoc.table.fasta[,3]),]
identical(assoc.table.clstr[,1:3], assoc.table.fasta[,1:3]) # FALSE
source('C:/compare otu methods/HPCC/assoc_repseq_IDs_with_clstrs_from_fasta.R')
source('C:/compare otu methods/HPCC/assoc_repseq_IDs_with_clstrs_from_fasta.R')
assoc.table.fasta <- assoc_repseq_IDs_with_clstrs_from_fasta(repseq_file="all_seq_complete.clust_rep_seqs.fasta")
head(assoc.table.fasta)
# Make sure they are in the same column order.
assoc.table.clstr <- assoc.table.clstr[order(assoc.table.clstr[,3]),]
assoc.table.fasta <- assoc.table.fasta[order(assoc.table.fasta[,3]),]
identical(assoc.table.clstr[,1:3], assoc.table.fasta[,1:3]) # FALSE
source('C:/compare otu methods/HPCC/assoc_repseq_IDs_with_clstrs_from_fasta.R')
source('C:/compare otu methods/HPCC/assoc_repseq_IDs_with_clstrs_from_fasta.R')
source('C:/compare otu methods/HPCC/assoc_repseq_IDs_with_clstrs_from_fasta.R')
my.otu <- clstr2otu(clstr_file="all_seq_complete.clust", dist=0.03, OutFile=TRUE, file.name= "dist_03.clust")
my.otu[ , 1:5]
rep.seqs <- get_repseq_IDs_from_fasta(repseq_file = "all_seq_complete.clust_rep_seqs.fasta")
rep.seqs[1:20]
#
assoc.table.clstr <- assoc_repseq_IDs_with_otus(clstr_file="dist_03.clust", rep_seqs=rep.seqs)
head(assoc.table.clstr)
source('C:/compare otu methods/HPCC/assoc_repseq_IDs_with_clstrs_from_fasta.R')
assoc.table.fasta <- assoc_repseq_IDs_with_clstrs_from_fasta(repseq_file="all_seq_complete.clust_rep_seqs.fasta")
head(assoc.table.fasta)
assoc.table.clstr <- assoc.table.clstr[order(assoc.table.clstr[,3]),]
identical(assoc.table.clstr[,1:3], assoc.table.fasta[,1:3]) # FALSE
setwd("C:/compare otu methods/rdpipe")
my.otu <- clstr2otu(clstr_file="all_samples.clust", dist=0.03, OutFile=TRUE, file.name= "dist_03.clust")
my.otu[ , 1:5]
rep.seqs <- get_repseq_IDs_from_fasta(repseq_file = "rdpipe_reps_rep_seqs.fasta")
rep.seqs[1:20]
assoc.table.clstr <- assoc_repseq_IDs_with_otus(clstr_file="dist_03.clust", rep_seqs=rep.seqs)
head(assoc.table.clstr)
assoc.table.fasta <- assoc_repseq_IDs_with_clstrs_from_fasta(repseq_file="rdpipe_reps_rep_seqs.fasta")
head(assoc.table.fasta)
source('C:/compare otu methods/rdpipe/assoc_repseq_IDs_with_clstrs_from_fasta.R')
source('C:/compare otu methods/rdpipe/assoc_repseq_IDs_with_clstrs_from_fasta.R')
source('C:/compare otu methods/rdpipe/assoc_repseq_IDs_with_clstrs_from_fasta.R')
assoc.table.fasta <- assoc_repseq_IDs_with_clstrs_from_fasta(repseq_file="rdpipe_reps_rep_seqs.fasta")
head(assoc.table.fasta)
# Make sure they are in the same column order.
assoc.table.clstr <- assoc.table.clstr[order(assoc.table.clstr[,3]),]
assoc.table.fasta <- assoc.table.fasta[order(assoc.table.fasta[,3]),]
identical(assoc.table.clstr[,1:3], assoc.table.fasta[,1:3]) # TRUE
library(RDPutils)
library(RDPutils)
setwd("C:/compare otu methods/HPCC")
test.hpcc.format <- test_new_assoc_fasta()
head(test.hpcc.format)
otu.hpcc <- clstr2otu(clstr_file="dist_03.clust")
otu.hpcc <- otu.hpcc[ ,order(colnames(otu.hpcc))]
identical(unname(colSums(otu.hpcc)), test.hpcc.format[,4])
identical(colnames(otu.hpcc), test.hpcc.format[,2])
sum(test.hpcc.format[,4])==sum(otu.rdpipe)
test.hpcc.format <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file="all_seq_complete.clust_rep_seqs.fasta")
otu.hpcc <- clstr2otu(clstr_file="dist_03.clust")
otu.hpcc <- otu.hpcc[ ,order(colnames(otu.hpcc))]
identical(unname(colSums(otu.hpcc)), test.hpcc.format[,4])
identical(colnames(otu.hpcc), test.hpcc.format[,2])
sum(test.hpcc.format[,4])==sum(otu.rdpipe)
sum(test.hpcc.format[,4])==sum(otu.hpcc)
setwd("C:/compare otu methods/rdpipe")
test.rdpipe.format <- assoc_repseq_IDs_with_otus_by_fasta("rdpipe_reps_rep_seqs.fasta")
head(test.rdpipe.format)
otu.rdpipe <- clstr2otu(clstr_file="dist_03.clust")
otu.rdpipe <- otu.rdpipe[ ,order(colnames(otu.rdpipe))]
identical(unname(colSums(otu.rdpipe)), test.rdpipe.format[,4])
identical(colnames(otu.rdpipe), test.rdpipe.format[,2])
sum(test.rdpipe.format[,4])==sum(otu.rdpipe)
rep.seq.file <- system.file("extdata", "all_seq_complete.clust_rep_seqs.fasta", package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file)
head(assoc.table)
rm(assoc.table)
rep.seq.file <- system.file("extdata", "all_seq_complete.clust_rep_seqs.fasta", package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file)
head(assoc.table)
rep.seq.file <- system.file("extdata", "all_seq_complete.clust_rep_seqs.fasta", package="RDPutils")
library(RDPutils)
library(RDPutils)
library(RDPutils)
library(RDPutils)
setwd("C:/compare otu methods/HPCC")
test.hpcc.format <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file="all_seq_complete.clust_rep_seqs.fasta")
head(test.hpcc.format)
otu.hpcc <- clstr2otu(clstr_file="dist_03.clust")
otu.hpcc <- otu.hpcc[ ,order(colnames(otu.hpcc))]
identical(unname(colSums(otu.hpcc)), test.hpcc.format[,4])
identical(colnames(otu.hpcc), test.hpcc.format[,2])
sum(test.hpcc.format[,4])==sum(otu.hpcc)
library(RDPutils)
setwd("C:/compare otu methods/HPCC")
test.hpcc.format <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file="all_seq_complete.clust_rep_seqs.fasta")
head(test.hpcc.format)
otu.hpcc <- clstr2otu(clstr_file="dist_03.clust")
otu.hpcc <- otu.hpcc[ ,order(colnames(otu.hpcc))]
identical(unname(colSums(otu.hpcc)), test.hpcc.format[,4])
identical(colnames(otu.hpcc), test.hpcc.format[,2])
sum(test.hpcc.format[,4])==sum(otu.hpcc)
setwd("C:/compare otu methods/rdpipe")
test.rdpipe.format <- assoc_repseq_IDs_with_otus_by_fasta("rdpipe_reps_rep_seqs.fasta")
head(test.rdpipe.format)
otu.rdpipe <- clstr2otu(clstr_file="dist_03.clust")
otu.rdpipe <- otu.rdpipe[ ,order(colnames(otu.rdpipe))]
identical(unname(colSums(otu.rdpipe)), test.rdpipe.format[,4])
identical(colnames(otu.rdpipe), test.rdpipe.format[,2])
sum(test.rdpipe.format[,4])==sum(otu.rdpipe)
data(assoc.table)
head(assoc.table)
my.in.file <- system.file("extdata", "fixrank_classified.txt", package="RDPutils")
my.tax.table <- make_tax_table(in_file = my.in.file, confidence=0.5)
my.tax.table
library(RDPutils)
my.in.file <- system.file("extdata", "fixrank_classified.txt", package="RDPutils")
my.tax.table <- make_tax_table(in_file = my.in.file, confidence=0.5)
my.tax.table
identical(otu, rdp.otu)
identical(otu, otu.rdp)
rformatfile <- system.file("extdata", "rformat_dist_0.03.txt",
package="RDPutils")
otu.rdp <- read.table(rformatfile, header=TRUE, row.names=1, sep="\t")
identical(otu, otu.rdp)
otu.rdp <- otu.rdp[sort(rownames(otu.rdp)), ]
identical(otu, otu.rdp)
class(otu[,1])
class(otu.rdp[,1])
identical(as.integer(otu), otu.rdp)
class(otu)
class(otu.rdp)
otu.rdp[] <- lapply(otu.rdp[], as.numeric)
identical(otu, oru.rdp)
identical(otu, otu.rdp)
sum(otu)
sum(otu.rdp)
getwd()
repseq.file <- system.file("ext.data",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file=)
head(assoc.table)
repseq.file <- system.file("ext.data",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
library(RDPutils)
repseq.file <- system.file("ext.data",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
repseq.file <- system.file("extdata", "all_seq_complete.clust_rep_seqs.fasta", package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file=repseq.file)
head(assoc.table)
getwd()
dir()
getwd()
repseq.file <- system.file("extdata",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
rep.seqs <- get_repseq_IDs_from_fasta(repseq_file = repseq.file)
clstr <- system.file("extdata", "dist_03.clust", package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_clstr(clstr_file=clstr,
rep_seqs=rep.seqs)
head(assoc.table
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="hier")
expt <- hier2phyloseq(hier_file=hier.file)
expt
unique(tax_table(expt)[ ,"domain"])
fungi <- subset_taxa(expt, domain=="Fungi")
fungi
ntaxa(expt)
sum(expt)
sum(otu_table(expt))
rank_names(expt)
expt.sum <- sum(otu_table(expt))
fungi.sum <- sum(otu_table(fung))
100*((expt.sum-fungi.sum)/expt.sum)
fungi.sum <- sum(otu_table(fungi))
100*((expt.sum-fungi.sum)/expt.sum)
setwd("C:/R_My_Packages/RDPutils/data")
load(assoc.table.rda)
load("assoc.table.rda")
head(data)
head(assoc.table)
data
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="hier")
expt <- hier2phyloseq(hier_file=hier.file)
expt
fungi <- subset_taxa(expt, domain=="Fungi")
fungi
tax_table(fungi)
head(tax_table(fungi))
tax_table(fungi)
n <- c(1:10)
otu.names <- make_otu_names(n)
otu.names
my.in.file <- system.file("extdata", "fixrank_classified.txt", package="RDPutils")
my.tax.table <- make_tax_table(in_file = my.in.file, confidence=0.5)
my.tax.table
data(sam.data)
str(sam.data)
plot(sam.data)
data
sam.data
getwd()
setwd("c:/test")
cols
cols <- c(T, T, F, F)
cols
sam.data[cols] <- lapply(sam.data[cols], as.factor)
str(sam.data)
save(sam.data, file="sam.data.rda")
rm(sam.data)
data(sam.data)
sam.data
library(RDPutils)
help(RDPutils)
install.packages("C:/R_My_Packages/RDPutils_1.0.tar.gz", repos = NULL, type = "source")
my.in.file <- system.file("extdata", "fixrank_classified.txt", package="RDPutils")
my.tax.table <- make_tax_table(in_file = my.in.file, confidence=0.5)
head(my.tax.table)
install.packages("C:/R_My_Packages/RDPutils_1.0.tar.gz", repos = NULL, type = "source")
library(RDPutils)
library("RDPutils", lib.loc="C:/Users/John Q/Documents/R/win-library/3.1")
getwd()
data(sam.data)
sam.data
data(rep.tree)
rep.tree <- system.file("extdaya", "rep.tree.nwk", package="RDPutils")
my.tree <- read_tree(rep.tree)
my.otu <- otu_table(as.matrix(t(otu)), taxaAreRows=TRUE, errorIfNULL=TRUE)
my.data <- sample_data(sam.data)
myexpt <- phyloseq(my.otu, my.tax.table, my.data, my.tree)
my.expt
library(RDPutils)
install.packages("C:/R_My_Packages/RDPutils_1.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/R_My_Packages/RDPutils_1.0.tar.gz", repos = NULL, type = "source")
library("RDPutils", lib.loc="C:/Users/John Q/Documents/R/win-library/3.1")
library(RDPutils)
library(RDPutils)
source('C:/delete_me/clstr2otu.R')
getwd()
library(RDPutils)
library(RDPutils)
library(RDPutils)
clstr.file <- system.file("extdata", "all_seq_complete.clust", package="RDPutils")
otu <- clstr2otu(clstr_file=clstr.file, dist=0.03, OutFile=TRUE, file.name= "dist_03.clust")
otu[ , 1:5]
library(RDPutils)
clstr2otu
clstr.file <- system.file("extdata", "all_seq_complete.clust", package="RDPutils")
otu <- clstr2otu(clstr_file=clstr.file, dist=0.03, OutFile=TRUE, file.name= "dist_03.clust")
otu[ , 1:5]
heaf(otu)
head(otu)
class(colnames(otu))
temp <- as.nummeric(colnames(otu))
temp <- as.numeric(colnames(otu))
temp
dim(otu)
colnames(otu)[1:25]
otu <- clstr2otu(clstr_file="c:/delete_me/dist_03.clust")
colnames(otu)
otu
clstr_file="all_seq_complete.clust"
dist=0.03
clstr <- read.delim(file=clstr_file, header=FALSE, as.is=TRUE)
clstr.header <- clstr[1:2, ] # Keep first 2 lines to print with subsetted cluster file.
setwd("c:/delete_me")
clstr <- read.delim(file=clstr_file, header=FALSE, as.is=TRUE)
clstr.header <- clstr[1:2, ] # Keep first 2 lines to print with subsetted cluster file.
dist.index <- NULL
for (n in seq(along=clstr[,1])) {
if (clstr[n,1] == "distance cutoff:") {
temp <- c(n, clstr[n,2])
dist.index <- rbind(dist.index, temp)
}
}
rownames(dist.index) <- NULL
dist.index[] <- lapply(dist.index, as.numeric)
dim(dist.index) <- c(length(dist.index)/2, 2)
dist.index <- as.data.frame(dist.index)
colnames(dist.index) <- c("line.no", "distance")
head(dist.index)
if (dist %in% dist.index[,2]) {
n <- which(dist.index[,2]==dist)
if (n==nrow(dist.index)) {
first.row <- as.numeric(dist.index[n,1])
last.row <- nrow(clstr)
} else {
first.row <- as.numeric(dist.index[n,1])
last.row <- as.numeric(dist.index[n+1,1])-1
}
} else {
message <- paste("Distance ",dist," not in cluster file.")
return(message)
}
clstr <- clstr[first.row:last.row, ]
clstr <- clstr[-c(1:2), -4]
head(clstr)
# Use dcast function from package reshape2 to reformat clstr as a dataframe.
clstr <- clstr[,c(2,1,3)]
colnames(clstr) <- c("sample", "clstr_no", "value")
head(clstr)
i <- as.logical(c(0,1,1))
clstr[i] <- lapply(clstr[i], as.integer)
head(clstr)
otu <- dcast(clstr, sample ~ clstr_no, fun.aggregate=NULL, fill=0)
otu[,1:5]
rownames(otu) <- otu[,1]
otu <- otu[,-1]
otu[,1:5]
class(otu)
otu <- as.data.frame(t(otu))
class(otu)
otu[1:5,]
otu <- dcast(clstr, sample ~ clstr_no, fun.aggregate=NULL, fill=0)
rownames(otu) <- otu[,1]
new.col.names <- make_otu_names(as.numeric(colnames(otu)))
colnames(otu) <- new.col.names
clstr_file="all_seq_complete.clust"
dist=0.03
clstr <- read.delim(file=clstr_file, header=FALSE, as.is=TRUE)
clstr.header <- clstr[1:2, ] # Keep first 2 lines to print with subsetted cluster file.
# Make index of row numbers for each distance in cluster file.
dist.index <- NULL
for (n in seq(along=clstr[,1])) {
if (clstr[n,1] == "distance cutoff:") {
temp <- c(n, clstr[n,2])
dist.index <- rbind(dist.index, temp)
}
}
rownames(dist.index) <- NULL
dist.index[] <- lapply(dist.index, as.numeric)
dim(dist.index) <- c(length(dist.index)/2, 2)
dist.index <- as.data.frame(dist.index)
colnames(dist.index) <- c("line.no", "distance")
# Check for maximum distance in dist.index
# If requested distance is maximum distance, last.row = last line in cluster file.
if (dist %in% dist.index[,2]) {
n <- which(dist.index[,2]==dist)
if (n==nrow(dist.index)) {
first.row <- as.numeric(dist.index[n,1])
last.row <- nrow(clstr)
} else {
first.row <- as.numeric(dist.index[n,1])
last.row <- as.numeric(dist.index[n+1,1])-1
}
} else {
message <- paste("Distance ",dist," not in cluster file.")
return(message)
}
clstr <- clstr[first.row:last.row, ]
#   Remove first 2 lines of clstr; also 4th column is not needed.
clstr <- clstr[-c(1:2), -4]
# Use dcast function from package reshape2 to reformat clstr as a dataframe.
clstr <- clstr[,c(2,1,3)]
colnames(clstr) <- c("sample", "clstr_no", "value")
i <- as.logical(c(0,1,1))
clstr[i] <- lapply(clstr[i], as.integer)
otu <- dcast(clstr, sample ~ clstr_no, fun.aggregate=NULL, fill=0)
rownames(otu) <- otu[,1]
new.col.names <- make_otu_names(as.numeric(colnames(otu)))
colnames(otu)
class(colnames(otu))
as.numeric(colnames(otu))
as(colnames(otu), "numeric")
length(colnames(otu))
colnames(otu)[1:5]
otu <- otu[ , -1]
colnames(otu)[1:5]
new.col.names <- make_otu_names(as.numeric(colnames(otu)))
colnames(otu) <- new.col.names
otu[, 1:5]
temp <- row.names
temp <- gsub("nc_", "", temp)
temp <- gsub("_trimmed", "", temp)
temp <- gsub("aligned_", "", temp)
temp <- gsub(".fasta","", temp)
rownames(otu) <- temp
otu <- otu[order(rownames(otu)), ]
otu <- otu[ , order(colnames(otu))]
otu <- as.data.frame(otu)
rownames(otu)
temp <- rownames(otu)
temp <- gsub("nc_", "", temp)
temp <- rownames(otu)
temp <- gsub("nc_", "", temp)
temp <- gsub("_trimmed", "", temp)
temp <- gsub("aligned_", "", temp)
temp <- gsub(".fasta","", temp)
rownames(otu) <- temp
otu <- otu[order(rownames(otu)), ]
otu <- otu[ , order(colnames(otu))]
otu <- as.data.frame(otu)
otu[ , 1:5]
class(otu[,1])
library(RDPutils)
getwd()
clstr.file <- system.file("extdata", "all_seq_complete.clust", package="RDPutils")
otu <- clstr2otu(clstr_file=clstr.file, dist=0.03, OutFile=TRUE, file.name= "dist_03.clust")
otu[ , 1:5]
setwd("C:/test_RDPutils")
clstr2otu
system.time()
setwd("C:/delete_me")
otu <- clstr2otu("all_seq_complete.clust")
tic();
otu <- clstr2otu("all_seq_complete.clust")
toc();
ptm <- proc.time()
ptm <- proc.time()
otu <- clstr2otu("all_seq_complete.clust")
proc.time()-ptm
setwd("C:/test_RDPutils")
ptm <- proc.time()
otu <- clstr2otu("pfizercluster.clust")
proc.time()-ptm
parallel <- function(){
library(doParallel)
cl <- makeCluster(3)
registerDoParallel(cl)
foreach(i=1:3) %dopar% sqrt(i)
getDoParWorkers()
}
parallel()
ptm <- proc.time()
otu <- clstr2otu("pfizercluster.clust")
proc.time()-ptm
setwd("C:/R_My_Packages/RDPutils")
library(RDPutils)
clstr.file <- system.file("extdata", "all_seq_complete.clust",
package="RDPutils")
otu <- clstr2otu(clstr_file=clstr.file, dist=0.03, OutFile=TRUE,
file.name= "dist_03.clust")
head(assoc.table)
otu[,1:5]
clstr.file <- system.file("extdata", "all_seq_complete.clust",
package="RDPutils")
otu <- clstr2otu(clstr_file=clstr.file, dist=0.03,
OutFile=TRUE, file.name= "dist_03.clust")
otu[ , 1:5]
repseq.file <- system.file("extdata",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file =
repseq.file)
head(assoc.table)
repseq.file <- system.file("extdata",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
rep.seqs <- get_repseq_IDs_from_fasta(repseq_file = repseq.file)
clstr <- system.file("extdata", "dist_03.clust", package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_clstr(clstr_file=clstr,
rep_seqs=rep.seqs)
head(assoc.table)
repseq.file <- system.file("extdata",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
trim_fasta_names(repseq_file = repseq.file,
trimmed_names = "names_trimmed.fasta", strip = FALSE)
rename_fasta(in_file = "names_trimmed.fasta", out_file = "renamed.fasta",
rename_table = assoc.table)
my.in.file <- system.file("extdata", "fixrank_classified.txt", package="RDPutils")
my.tax.table <- make_tax_table(in_file = my.in.file, confidence=0.5)
head(my.tax.table)
hier.file <- system.file("extdata", "test_hier.txt", package="hier")
expt <- hier2phyloseq(hier_file=hier.file)
expt
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
rank_names(expt)
unique(tax_table(expt)[ ,"domain"])
fungi <- subset_taxa(expt, domain=="Fungi")
fungi
expt.sum <- sum(otu_table(expt))
fungi.sum <- sum(otu_table(fungi))
100*((expt.sum-fungi.sum)/expt.sum)
clstr.file <- system.file("extdata", "all_seq_complete.clust",
package="RDPutils")
otu <- clstr2otu(clstr_file=clstr.file, dist=0.03, OutFile=TRUE,
file.name= "dist_03.clust")
save(otu, file="C:/R_My_Packages/RDPutils/data/otu.rda")
repseq.file <- system.file("extdata",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file =
repseq.file)
head(assoc.table)
save(assoc.table, file="C:/R_My_Packages/RDPutils/data/assoc_table.rda")
save(assoc.table, file="C:/R_My_Packages/RDPutils/data/assoc.table.rda")
repseq.file <- system.file("extdata",
"all_seq_complete.clust_rep_seqs.fasta",
package="RDPutils")
rep.seqs <- get_repseq_IDs_from_fasta(repseq_file = repseq.file)
clstr <- system.file("extdata", "dist_03.clust", package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_clstr(clstr_file=clstr,
rep_seqs=rep.seqs)
head(assoc.table)
