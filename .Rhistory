}
head(class.table)
taxa.col.no
taxa.col.no[1]
taxa.col.no[-1]
for (i in 1:nrow(class.table)) {
for (j in taxa.col.no[-1]) {
if (class.table[i, j] < confidence) {
class.table[i, j] <- 1
if(substr(class.table[i, (j-3)], 1, 5)=="uncl_") {class.table[i, (j-1)] <- class.table[i, (j-3)]}
else {class.table[i, (j-1)] <- paste("uncl_", class.table[i, (j-3)], sep="")}
}
}
}
taxa.col.no[-1]
class.table[1,3]
class.table[1,5]
class.table[1,7]
class.table[1,9]
class.table[1,11]
class.table[ ,11]
class.table[1 ,]
taxa.col.no
for (i in 1:nrow(class.table)) {
for (j in taxa.col.no) {
if (class.table[i, j] < confidence) {
class.table[i, j] <- 1
if(substr(class.table[i, (j-3)], 1, 5)=="uncl_") {class.table[i, (j-1)] <- class.table[i, (j-3)]}
else {class.table[i, (j-1)] <- paste("uncl_", class.table[i, (j-3)], sep="")}
}
}
}
# col.no <- seq(from=3, to=ncol(class.table)-1, by=2)
for (i in 1:nrow(class.table)) {
for (j in conf.col.no) {
if (class.table[i, j] < confidence) {
class.table[i, j] <- 1
if(substr(class.table[i, (j-3)], 1, 5)=="uncl_") {class.table[i, (j-1)] <- class.table[i, (j-3)]}
else {class.table[i, (j-1)] <- paste("uncl_", class.table[i, (j-3)], sep="")}
}
}
}
conf.col.no
source('C:/R_My_Packages/RDPutils/R/import_utax_file.R')
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt")
?or
?OR
source('C:/R_My_Packages/RDPutils/R/import_utax_file.R')
source('C:/R_My_Packages/RDPutils/R/import_utax_file.R')
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt")
taxa.col.no
taxa.col.no <- c(1, seq(from=3, to=ncol(class.table), by=2))
taxa.col.no
source('C:/R_My_Packages/RDPutils/R/import_utax_file.R')
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt")
temp <- read.table(file = in_file, sep = "\t", fill = TRUE, stringsAsFactors = FALSE)
#
otus <- temp[ , 1]
taxa <- temp[ , 2]
otus
taxa
n.ranks <- vector("integer")
for (i in 1:nrow(temp)) {
n.ranks[i] <- count_char_occurrences(":", temp[i, 2])
}
n.ranks <- max(n.ranks)
n.ranks
taxa <- gsub(')', '', taxa)
# Substitute commma for opening parenthesis.
taxa <- gsub('\\(', ',', taxa)
# Subsitute underscore for colon
taxa <- gsub(':', '_', taxa)
class.table <- matrix(data = NA, nrow = length(otus), ncol = 2*n.ranks-1)
dim(class.table)
for (i in 1:nrow(class.table)) {
taxa.line <- strsplit(taxa[i], ',')
for (j in 1:length(taxa.line[[1]])) {
class.table[i, j] <- taxa.line[[1]][j]
}
}
head(class.table)
class.table[class.table[ , 12!=NA], ]
if (all(is.na(class.table[ , (2*n.ranks)-1]))) {
class.table <- class.table[ , -c(2*n.ranks-1,n.ranks)]
}
dim(class.table)
conf.col.no <- seq(from=3, to=ncol(class.table), by=2)
head(class.table)
conf.col.no
class.table <- as.data.frame(class.table)
class.table[conf.col.no] <- lapply(class.table[conf.col.no], as.character)
class.table[conf.col.no] <- lapply(class.table[conf.col.no], as.numeric)
head(class.table)
taxa.col.no <- c(1, seq(from=3, to=ncol(class.table), by=2))
taxa.col.no
taxa.col.no <- c(1, seq(from=2, to=ncol(class.table), by=2))
taxa.col.no
ncol(class.table)
head(class.table)
taxa.col.no
# Convert these columns to character.
class.table[taxa.col.no] <- lapply(class.table[taxa.col.no], as.character)
for (i in 1:nrow(class.table)) {
for (j in conf.col.no) {
if (is.na(class.table[i, j])) {
class.table[i, j] <- confidence/2
}
}
}
head(class.table)
# col.no <- seq(from=3, to=ncol(class.table)-1, by=2)
for (i in 1:nrow(class.table)) {
for (j in conf.col.no) {
if (class.table[i, j] < confidence) {
class.table[i, j] <- 1
if(substr(class.table[i, (j-3)], 1, 5)=="uncl_") {class.table[i, (j-1)] <- class.table[i, (j-3)]}
else {class.table[i, (j-1)] <- paste("uncl_", class.table[i, (j-3)], sep="")}
}
}
}
j
conf.col.no
conf.col.no[-1]
source('C:/R_My_Packages/RDPutils/R/import_utax_file.R')
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt")
conf.col.no[-1]
source('C:/R_My_Packages/RDPutils/R/import_utax_file.R')
source('C:/R_My_Packages/RDPutils/R/import_utax_file.R')
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt")
tax.tab
tax.tab[1,3]
tax.tab[1,]
tax.tab[5,]
library(RDPutils)
library(RDPutils)
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt")
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt", confidence = 0.5)
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt", confidence = 0.5)
ntaxa(tax.tab)
otu.tab <- read.table(file = "C:/X_tutorial/dec_10/otutab_03.txt", hader = TRUE, rownames = 1, comment.char = "", sep = "/t")
otu.tab <- read.table(file = "C:/X_tutorial/dec_10/otutab_03.txt", header = TRUE, rownames = 1, comment.char = "", sep = "/t")
otu.tab <- read.table(file = "C:/X_tutorial/dec_10/otutab_03.txt", header = TRUE, row.names = 1, comment.char = "", sep = "/t")
otu.tab <- read.table(file = "C:/X_tutorial/dec_10/otutab_03.txt", header = TRUE, row.names = 1, comment.char = "", sep = "\t")
library(Biostrings)
otus.fasta <-readDNAStringSet("C:/X_tutorial/dec_10/otus_03.fasta", format = "fasta")
otu.tab <- otu_table(t(otu.tab), taxa_are_rows = TRUE, errorIfNull=TRUE))
otu.tab <- otu_table(t(otu.tab), taxa_are_rows = TRUE, errorIfNULL = TRUE)
expt <- phyloseq(otu.tab, tax.tab, otus.fasta)
tax_names(otu.tab)
taxa_names(otu.tab)
otu.tab <- otu_table(otu.tab, taxa_are_rows = TRUE, errorIfNULL = TRUE)
expt <- phyloseq(otu.tab, tax.tab, otus.fasta)
taxa_names(otu.tab)
otu.tab <- otu_table(otu.tab, taxa_are_rows = FALSE, errorIfNULL = TRUE)
taxa_names(otu.tab)
otu.tab <- otu_table(otu.tab, taxa_are_rows = TRUE, errorIfNULL = TRUE)
sample_names(otu.tab
)
otu.tab <- otu_table(otu.tab, taxa_are_rows = FALSE, errorIfNULL = TRUE)
sample_names(otu.tab)
tax.tab <- import_utax_file(in_file="C:/X_tutorial/dec_10/utax_03.txt", confidence = 0.5)
library(Biostrings)
otus.fasta <-readDNAStringSet("C:/X_tutorial/dec_10/otus_03.fasta", format = "fasta")
otu.tab <- read.table(file = "C:/X_tutorial/dec_10/otutab_03.txt", header = TRUE, row.names = 1, comment.char = "", sep = "\t")
otu.tab <- t(otu.tab)
otu.tab <- otu_table(otu.tab, taxa_are_rows = TRUE, errorIfNULL = TRUE)
expt <- phyloseq(otu.tab, tax.tab, otus.fasta)
taxa_names(expt)
taxa_names(otu.tab)
taxa_names(otus.fasta)
taxa_names(tax.tab)
class(otu.tab)
otu.tab <- read.table(file = "C:/X_tutorial/dec_10/otutab_03.txt", header = TRUE, row.names = 1, comment.char = "", sep = "\t")
otu.tab <- t(otu.tab)
class(otu.tab)
row.names(otu.tab)
colnames(otu.tab)
otu <- read.table(file = "C:/X_tutorial/dec_10/otutab_03.txt", header = TRUE, row.names = 1, comment.char = "", sep = "\t")
otu <- t(otu)
otu.tab <- otu_table(otu, taxa_are_rows = TRUE, errorIfNULL = TRUE)
taxa_names(otu.tab)
rm(otu.tab)
rownames(otu)
colnames(otu)
otu <- t(otu)
colnames(otu)
rownames(otu)
otu.tab <- otu_table(otu, taxa_are_rows = TRUE, errorIfNULL = TRUE)
taxa_names(otu.tab)
expt <- phyloseq(otu.tab, tax.tab, otus.fasta)
exp()
expt
setwd("C:/X_tutorial/dec_11a")
in_file="reads_03.sintax"
confidence=0.8
temp <- read.table(file = in_file, sep = "\t", fill = TRUE, stringsAsFactors = FALSE)
dim(tamp)
dim(temp)
otus <- temp[ , 1]
taxa <- temp[ , 2]
otus <- temp[ , 1]
in_file="reads_03.sintax"
confidence=0.8
temp <- read.table(file = in_file, sep = "\t", fill = TRUE, stringsAsFactors = FALSE)
# Extract otu names.
otus <- temp[ , 1]
# Extract taxonomy with confidences.
taxa <- temp[ , 2]
head(taxa)
taxa <- gsub(')', '', taxa)
head(taxa)
taxa <- gsub('\\(', ',', taxa)
head(taxa)
taxa <- gsub(':', '_', taxa)
head(taxa)
class.table <- matrix(data = NA, nrow = length(otus), ncol = 14)
for (i in 1:nrow(class.table)) {
taxa.line <- strsplit(taxa[i], ',')
for (j in 1:14) {
class.table[i, j] <- taxa.line[[1]][j]
}
}
dim(class.table
)
head(class.table)
all(is.na(class.table[ , 13]))
if (all(is.na(class.table[ , 13]))) {
class.table <- class.table[ , -c(13,14)]
}
col.no <- seq(from=2, to=ncol(class.table), by=2)
col.no
class.table <- as.data.frame(class.table)
class.table[col.no] <- lapply(class.table[col.no], as.character)
class.table[col.no] <- lapply(class.table[col.no], as.numeric)
head(class.table)
col.no <- seq(from=1, to=ncol(class.table)-1, by=2)
col.no
class.table[col.no] <- lapply(class.table[col.no], as.character)
head(class.table)
class(class.table[ , 1])
conf.col.no <- seq(from=2, to=ncol(class.table), by=2)
# Convert these columns to numeric
class.table <- as.data.frame(class.table)
class.table[col.no] <- lapply(class.table[conf.col.no], as.character)
class.table[col.no] <- lapply(class.table[conf.col.no], as.numeric)
taxa.col.no <- seq(from=1, to=ncol(class.table)-1, by=2)
# Convert these columns to character.
class.table[col.no] <- lapply(class.table[taxa.col.no], as.character)
#There may be NA's in some columns, so replace them first.
# with confidence < specified confidence:
for (i in 1:nrow(class.table)) {
for (j in conf.col.no) {
if (is.na(class.table[i, j])) {
class.table[i, j] <- confidence/2
}
}
}
# Replace IDs where domain is unidentfied.
for (i in  1:nrow(class.table)) {
if (class.table[i, 2] < confidence) {
class.table[i, 2] <- 1
class.table[i, 1] <- "uncl_Domain"
}
}
# Replace IDs where confidence is less than specified confidence:
col.no <- seq(from=4, to=ncol(class.table), by=2)
for (i in 1:nrow(class.table)) {
for (j in col.no) {
if (class.table[i, j] < confidence) {
class.table[i, j] <- 1
if(substr(class.table[i, (j-3)], 1, 5)=="uncl_") {class.table[i, (j-1)] <- class.table[i, (j-3)]}
else {class.table[i, (j-1)] <- paste("uncl_", class.table[i, (j-3)], sep="")}
}
}
}
head(class.table)
temp <- read.table(file = in_file, sep = "\t", fill = TRUE, stringsAsFactors = FALSE)
# Extract otu names.
otus <- temp[ , 1]
# Extract taxonomy with confidences.
taxa <- temp[ , 2]
# Modify taxonomy field.
# Delete closing parenthesis
taxa <- gsub(')', '', taxa)
# Substitute commma for opening parenthesis.
taxa <- gsub('\\(', ',', taxa)
# Subsitute underscore for colon
taxa <- gsub(':', '_', taxa)
# Create data frame with ranks and confidences in separate columns.
class.table <- matrix(data = NA, nrow = length(otus), ncol = 14)
for (i in 1:nrow(class.table)) {
taxa.line <- strsplit(taxa[i], ',')
for (j in 1:14) {
class.table[i, j] <- taxa.line[[1]][j]
}
}
if (all(is.na(class.table[ , 13]))) {
class.table <- class.table[ , -c(13,14)]
}
#Create a vector designating confidence columns.
conf.col.no <- seq(from=2, to=ncol(class.table), by=2)
head(class.table)
conf.col.no
class.table <- as.data.frame(class.table)
class.table[col.no] <- lapply(class.table[conf.col.no], as.character)
class.table[col.no] <- lapply(class.table[conf.col.no], as.numeric)
temp <- read.table(file = in_file, sep = "\t", fill = TRUE, stringsAsFactors = FALSE)
# Extract otu names.
otus <- temp[ , 1]
# Extract taxonomy with confidences.
taxa <- temp[ , 2]
# Modify taxonomy field.
# Delete closing parenthesis
taxa <- gsub(')', '', taxa)
# Substitute commma for opening parenthesis.
taxa <- gsub('\\(', ',', taxa)
# Subsitute underscore for colon
taxa <- gsub(':', '_', taxa)
# Create data frame with ranks and confidences in separate columns.
class.table <- matrix(data = NA, nrow = length(otus), ncol = 14)
for (i in 1:nrow(class.table)) {
taxa.line <- strsplit(taxa[i], ',')
for (j in 1:14) {
class.table[i, j] <- taxa.line[[1]][j]
}
}
if (all(is.na(class.table[ , 13]))) {
class.table <- class.table[ , -c(13,14)]
}
#Create a vector designating confidence columns.
conf.col.no <- seq(from=2, to=ncol(class.table), by=2)
# Convert these columns to numeric
class.table <- as.data.frame(class.table)
class.table[conf.col.no] <- lapply(class.table[conf.col.no], as.character)
class.table[conf.col.no] <- lapply(class.table[conf.col.no], as.numeric)
head(class.table)
# Create a vector designating taxa columns.
taxa.col.no <- seq(from=1, to=ncol(class.table)-1, by=2)
taxa.col.no
class.table[taxa.col.no] <- lapply(class.table[taxa.col.no], as.character)
head(class.table)
#There may be NA's in some columns, so replace them first.
# with confidence < specified confidence:
for (i in 1:nrow(class.table)) {
for (j in conf.col.no) {
if (is.na(class.table[i, j])) {
class.table[i, j] <- confidence/2
}
}
}
head(class.table)
for (i in  1:nrow(class.table)) {
if (class.table[i, 2] < confidence) {
class.table[i, 2] <- 1
class.table[i, 1] <- "uncl_Domain"
}
}
head(class.table)
# Replace IDs where confidence is less than specified confidence:
col.no <- seq(from=4, to=ncol(class.table), by=2)
for (i in 1:nrow(class.table)) {
for (j in col.no) {
if (class.table[i, j] < confidence) {
class.table[i, j] <- 1
if(substr(class.table[i, (j-3)], 1, 5)=="uncl_") {class.table[i, (j-1)] <- class.table[i, (j-3)]}
else {class.table[i, (j-1)] <- paste("uncl_", class.table[i, (j-3)], sep="")}
}
}
}
head(class.table)
class.table <- class.table[ , -c(seq(from = 2, to = ncol(class.table), by = 2))]
# Add row names and column names.
row.names(class.table) <- otus
taxa <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")[1:ncol(class.table)]
colnames(class.table) <- taxa
head(class.table)
class.table <- as.matrix(class.table)
head(class.table)
library(phyloseq)
class.table <- tax_table(class.table, errorIfNULL = TRUE)
class(class.table)
head(class.table)
library(RDPutils)
?import_utax_file
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
rank_names(expt)
unique(tax_table(expt)[ ,"domain"])
unique(tax_table(expt)[ ,"Domain"])
fungi <- subset_taxa(expt, Domain=="Fungi")
fung
fungi
library(RDPutils)
library(RDPutils)
test <- import_biom("C:\X_tutorial/Bingbing/first/otutab_taxa_03.json", parseFunction = parse_taxonomy_usearch())
test <- import_biom("C:/X_tutorial/Bingbing/first/otutab_taxa_03.json", parseFunction = parse_taxonomy_usearch())
test <- import_biom("C:/X_tutorial/Bingbing/first/otutab_taxa_03.json", parseFunction = parse_taxonomy_usearch)
test
library(RDPutils)
test <- import_biom("C:/X_tutorial/Bingbing/first/otutab_taxa_03.json", parseFunction = parse_taxonomy_usearch, refseqfilename = "C:/X_tutorial/Bingbing/first/otus_03.fasta")
test
library(RDPutils)
library(RDPutils)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
expt
library(RDPutils)
expt <- hier2phyloseq(hier_file=hier.file)
expt
class(expt)
attributes(expt)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
hier.file
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
hier_file <- hier.file
taxa <- read.table(file=hier_file, header=FALSE, sep="\t", stringsAsFactors=FALSE, fill=TRUE)
taxa[1,]
colnames(taxa) <- taxa[1,]
taxa <- taxa[-1,]
head(taxa)
all.ranks <- unique(taxa$rank)
possible.ranks <- c("rootrank", "kingdom", "domain","phylum","class", "order", "family", "genus", "species", "Rootrank", "Kingdom", "Domain","Phylum","Class", "Order", "Family", "Genus", "Species")
actual.ranks <- intersect(all.ranks, possible.ranks)
n.ranks <- length(actual.ranks)
last.rank <- actual.ranks[n.ranks]
actual.ranks
last.rank
head(taxa)
dim(taxa)
taxa <- taxa[taxa$rank %in% c(last.rank, ""), ]
dim(taxa)
my.table <- matrix("", n.ranks, nrow=nrow(taxa))
colnames(my.table) <- actual.ranks
rownames(my.table) <- paste("ID_", as.character(taxa[,1]), sep="")
head(my.table)
rank.names <- colnames(my.table)
for (k in 1:ncol(my.table)){
for (i in 1:nrow(my.table)) {
my.line <- unlist(strsplit(taxa[i,2],";"))
if (rank.names[k] %in% my.line) {
j <- which(my.line==rank.names[k])
level.name <- my.line[j-1]
my.table[i,k] <- level.name
}
}
}
head(my.table)
# Fill in empty cells in classfication table with"unclass_higher rank".
for (i in 1:nrow(my.table)) {
for (j in 2:ncol(my.table)) {
if (my.table[i,j]=="") {
if (substr(my.table[i,j-1],1,7)=="unclass") {my.table[i,j]<-my.table[i,j-1]}
else {my.table[i,j]<- paste("unclass_", my.table[i,j-1], sep="")}
}
}
}
head(my.table)
my.table
dim(my.table)
my.table[ 700:717, ]
my.table[my.line[ , 1]=="", ]
my.table[my.table[ , 1]=="", ]
rank.names <- sapply(rank.names, simple_cap)
colnames(my.table) <- rank.names
head(my.table)
otu <- taxa[ , -c(1:4)]
rownames(otu) <- paste("ID_", as.character(taxa[,1]), sep="")
otu[] <- lapply(otu, as.numeric)
sam.names <- colnames(otu)
sam.names <- gsub("nc_", "", sam.names, fixed=TRUE)
sam.names <- gsub("_trimmed", "", sam.names, fixed=TRUE)
sam.names <- gsub("aligned_", "", sam.names, fixed=TRUE)
sam.names <- gsub(".fasta","", sam.names, fixed=TRUE)
sam.names <- gsub(".fastq","", sam.names, fixed=TRUE)
sam.names <- gsub("_",".", sam.names, fixed=TRUE)
colnames(otu) <- sam.names
head(otu)
my.tax <- tax_table(my.table, errorIfNULL=TRUE)
my.otu <- otu_table(as.matrix(otu), taxa_are_rows=TRUE, errorIfNULL=TRUE)
my.expt <- phyloseq(my.otu, my.tax)
my.expt
my.tax
my.otu
library(phyloseq)
my.tax <- tax_table(my.table, errorIfNULL=TRUE)
my.otu <- otu_table(as.matrix(otu), taxa_are_rows=TRUE, errorIfNULL=TRUE)
my.expt <- phyloseq(my.otu, my.tax)
my.expt
my.tax
my.otu
my.expt <- phyloseq(my.otu, my.tax)
str(my.expt
)
hier <- hier2phyloseq(hier_file = "C:\X_tutorial\Bingbing\hier_Incubation.txt")
hier <- hier2phyloseq(hier_file = "C:/X_tutorial/Bingbing/hier_Incubation.txt")
hier
str(hier
)
library(RDPutils)
?hier2phyloseq
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
rm(expt)
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
expt <- import_usearch_biome_file(in_file = "C:/X_tutorial/Bingbing/otutab_taxa_03.json")
expt
