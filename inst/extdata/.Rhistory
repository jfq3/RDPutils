specpool(dune)
9/8
# Number of species seen exactly once:
dune.pa <- decostand(dune, method = "pa")
n1 <- sum(colSums(dune.pa)==1)
n1
# Number of secies seen exactly twice.
n2 <- sum(colSums(dune.pa)==2)
n2
unseen <- n1^3/(2*n2)
unseen
unseen <- n1^2/(2*n2)
unseen
seen <- sum(colSums(dune.p1)>0)
seen
colSums(dune.p1)
seen <- sum(colSums(dune.pa)>0)
seen
chao <- seen + unseen
chao
specpool(dune)
n1
n2
2*n2
n1^2
# Number of species seen exactly once:
dune.pa <- decostand(dune, method = "pa")
n1 <- sum(colSums(dune.pa)==1)
n1
# Number of secies seen exactly twice.
n2 <- sum(colSums(dune.pa)==2)
n2
unseen <- n1^2/(2*n2)
unseen
seen <- sum(colSums(dune.pa)>0)
seen
chao <- seen + unseen
chao
specnumber(dune)
specnumber(dune, MARGIN = 2)
specnumber
estimateR(dune)
estimateR
specpool2vect(dune, index = "chao")
specpool2vect(specpool(dune), index = "chao")
unseen*(seen/(seen-1))
seen
unseen*((N-1)/N)
unseen
N <- ncol(dune.pa)
unseen*((N-1)/N)
unseen
N <- ncol(dune.pa)
unseen*((N-1)/N)
unseen
specpool(dune)
sum(dune==1)
sum(dune==2)
sum(colSums(dune)==1)
sum(colSums(dune)==2)
29/30
2*(29/30)
sum(colSums(dune.pa)==2)
sum(colSums(dune.pa)==1)
9/4
2.25*29/30
specpool
colSums(dune > 0)
freq <- colSums(dune > 0)
freq
sum(freq ==1)
sum(freq ==2)
2.25*29/30
specpool(dune)
x <- dune
x <- as.matrix(x)
pool <- ""
rm(pool)
if (missing(pool))
pool <- rep("All", nrow(x))
pool <- rep("All", nrow(x))
pool
any(nas <- is.na(pool))
out <- seq(1:nrow(x))
out
groups <- table(pool)
groups
inds <- names(groups)
inds
S <- var.chao <- chao <- var.jack1 <- jack.1 <- jack.2 <- var.boot <- bootS <- rep(NA,
length(inds))
S
names(S) <- names(var.chao) <- names(chao) <- names(var.jack1) <- names(jack.1) <- names(jack.2) <- names(var.boot) <- names(bootS) <- inds
S
inds
a1 <- a2 <- NA
a1
a2
gr <- out[pool == is]
is
is <- "All"
gr <- out[pool == is]
gr
n <- length(gr)
n
n <= 0
ssc <- (n - 1)/n
ssc
n - 1
n
dim(dune)
rownames(duen)
rownames(dune)
colnames(dune)
2.25*19/20
N <- nrow(dune.pa)
unseen*((N-1)/N)
unseen
sum(colSums(dune.pa)==1)
library(vegan)
data("dune")
data("dune.env")
specpool(dune, smallsample = TRUE, dispplay = "chao1")
specpool(dune, smallsample = TRUE, display = "chao1")
specpool(dune, smallsample = TRUE, display = "Chao1")
specpool(dune, smallsample = TRUE)
specpool(dune, smallsample = TRUE, display = "chao")
# Number of samples:
N <- nrow(dune)
N
# Number of species seen exactly once:
dune.pa <- decostand(dune, method = "pa") # presence/absence
n1 <- sum(colSums(dune.pa)==1)
n1
# Number of secies observed exactly twice:
n2 <- sum(colSums(dune.pa)==2)
n2
# Observed species:
observed <- sum(colSums(dune.pa)>0)
observed
# Small sample correctoin term:
ssc <- ((N-1)/N)
ssc
# Unobserved species:
unobserved <- n1^2/(2*n2)*ssc
unobserved
# Chao estimate:
chao <- observed + unobserved
chao
bf <- dune[dune.env$Management=="BF", ]
bf <- bf[ , colSums(bf)>0]
any(bf==1)
any(bf==2)
specpool(bf)
hf <- dune[dune.env$Management=="HF", ]
hf <- hf[ , colSums(hf)>0]
hf <- decostand(hf, "pa")
any(colSums(hf)==1)
any(colSums(hf)==2)
sum(colSums(hf)==1)
sum(colSums(hf)==2)
specpool(hf)
nm <- dune[dune.env$Management=="NM", ]
nm <- nm[ , colSums(nm)>0]
any(nm==1)
any(nm==2)
specpool(nm)
sf <- dune[dune.env$Management=="SF", ]
sf <- sf[ , colSums(sf)>0]
any(sf==1)
any(sf==2)
specpool(sf)
bf <- dune[dune.env$Management=="BF", ]
bf <- bf[ , colSums(bf)>0]
any(bf==1)
any(bf==2)
specpool(bf)
hf <- dune[dune.env$Management=="HF", ]
hf <- hf[ , colSums(hf)>0]
hf <- decostand(hf, "pa")
any(colSums(hf)==1)
any(colSums(hf)==2)
sum(colSums(hf)==1)
sum(colSums(hf)==2)
specpool(hf)
nm <- dune[dune.env$Management=="NM", ]
nm <- nm[ , colSums(nm)>0]
any(nm==1)
any(nm==2)
specpool(nm)
sf <- dune[dune.env$Management=="SF", ]
sf <- sf[ , colSums(sf)>0]
any(sf==1)
any(sf==2)
specpool(sf)
any(colSums(hf)==1)
any(colSums(hf)==2)
any(bf==1)
any(hf==1)
# First, check that the samples are in the same order in dune and dune.env.
all(rownames(dune)==rownames(dune.env))
# List the factors for Management.
unique(dune.env$Management)
# Get estimates for each managment groups.
specpool(dune, pool = dune.env$Management)
levels (dune.env$Management)
bf <- dune[dune.env$Management=="BF", ]
bf <- bf[ , colSums(bf)>0]
any(bf==1)
any(bf==2)
specpool(bf)
hf <- dune[dune.env$Management=="HF", ]
hf <- hf[ , colSums(hf)>0]
hf <- decostand(hf, "pa")
any(colSums(hf)==1)
any(colSums(hf)==2)
sum(colSums(hf)==1)
sum(colSums(hf)==2)
specpool(hf)
any(hf==1)
any(hf==2)
estimateR(dune)
specpool(dune)
specpool(dune.pa)
specpool(dune.pa) # smallsample = TRUE by default.
# Number of samples:
N <- nrow(dune)
N
# Number of species seen exactly once:
freq <- colSums(dune)
n1 <- sum(freq==1)
n1
# Number of species observed exactly twice:
n2 <- sum(freq==2)
n2
# Observed species:
observed <- sum(freq>0)
observed
# Small sample correctoin term:
ssc <- ((N-1)/N)
ssc
# Unobserved species:
unobserved <- n1^2/(2*n2)*ssc
unobserved
# Chao estimate:
chao <- observed + unobserved
chao
estimateR(dune)
estimateR(dune[1:6, ])
print"Sample" 1
print("Sample ")
is.any(dune[1, ]==1)
is.any(dune[1, ]==2)
any(dune[1, ]==1)
any(dune[1, ]==2)
estimateR(dune[1:6, ])
for (i in 1:6) {
i
any(dune[1, ]==1)
any(dune[1, ]==2)
}
for (i in 1:6) {
i
any(dune[1, ]==1)
any(dune[1, ]==2)
}
for (i in 1:6) {
print(i)
any(dune[1, ]==1)
any(dune[1, ]==2)
}
for (i in 1:6) {
print(i)
print(any(dune[1, ]==1))
print(any(dune[1, ]==2))
}
n1 <- sum(dune[1,]==1)
n2 <- sum(dune[1,]==2)
ssc <- 1
unobserved <- n1^2/(2*n2)*ssc
unobserved
unobserved <- n1^2/(2*(n2+1))
unobserved
N <- sum(dune[1, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
unobserved
for (i in 1:6) {
print(i)
n1 <- sum(dune[i,]==1)
n2 <- sum(dune[i,]==2)
N <- sum(dune[i, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
print(unobserved)
}
for (i in 1:6) {
print("Sample", "Unobserved")
n1 <- sum(dune[i,]==1)
n2 <- sum(dune[i,]==2)
N <- sum(dune[i, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
print(i, unobserved)
}
for (i in 1:6) {
print("Sample", "Unobserved")
n1 <- sum(dune[i,]==1)
n2 <- sum(dune[i,]==2)
N <- sum(dune[i, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
print(i, unobserved)
}
print(c("Sample", "Unobserved"))
for (i in 1:6) {
print(c("Sample", "Unobserved"))
n1 <- sum(dune[i,]==1)
n2 <- sum(dune[i,]==2)
N <- sum(dune[i, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
print(i, unobserved)
}
for (i in 1:6) {
print(c("Sample", "Unobserved"))
n1 <- sum(dune[i,]==1)
n2 <- sum(dune[i,]==2)
N <- sum(dune[i, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
print(c(i, unobserved))
}
rslt <- matrix(data = NA, nrow = 6,ncol = 6)
rslt <- matrix(data = NA, nrow = 6,ncol = 6)
rslt <- as.data.frame(rslt)
colnames(rslt) <- c("Sample", "N", "n1", "n2", "Unobserved", "Chao")
rslt
for (i in 1:6) {
n1 <- sum(dune[i,]==1)
n2 <- sum(dune[i,]==2)
N <- sum(dune[i, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
chao <- N + unobserved
rslt[i, ] <- c(i, N, n1, n2, unobserved, chao)
}
rslt
rslt <- matrix(data = NA, nrow = nrow(dune),ncol = 6)
rslt <- as.data.frame(rslt)
colnames(rslt) <- c("Sample", "N", "n1", "n2", "Unobserved", "Chao")
for (i in 1:nrow(dune)) {
n1 <- sum(dune[i,]==1)
n2 <- sum(dune[i,]==2)
N <- sum(dune[i, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
chao <- N + unobserved
rslt[i, ] <- c(i, N, n1, n2, unobserved, chao)
}
rslt
estimateR(dune)
rslt <- matrix(data = NA, nrow = nrow(dune),ncol = 6)
rslt <- as.data.frame(rslt)
colnames(rslt) <- c("Sample", "N", "n1", "n2", "Unobserved", "Chao")
for (i in 1:nrow(dune)) {
n1 <- sum(dune[i,]==1)
n2 <- sum(dune[i,]==2)
N <- sum(dune[i, ]>0)
unobserved <- n1*(n1-1)/(2*(n2+1))
chao <- N + unobserved
rslt[i, ] <- c(i, N, n1, n2, unobserved, chao)
}
rslt
sum(rslt$n1==0)
sum(rslt$n1==1)
rslt
table(rslt$n1)
estimateR(dune)
all(apply(dune, 1, x>1))
dune.pa <- decostand(dune, method = "pa") # presence/absence
specpool(dune.pa) # smallsample = TRUE by default.
freq <- colSums(dune)
n1 <- sum(freq==1)
n1
dune.pa <- decostand(dune, method = "pa") # convert to presence/absence
n1 <- sum(colSums(dune.pa==1))
n1
dune.pa
n1 <- sum(colSums(dune.pa)==1)
n1
n2 <- sum(colSums(dune.pa)==2)
n2
# Number of samples:
N <- nrow(dune)
N
# Number of species seen exactly once:
dune.pa <- decostand(dune, method = "pa") # convert to presence/absence
n1 <- sum(colSums(dune.pa)==1)
n1
# Number of species observed exactly twice:
n2 <- sum(colSums(dune.pa)==2)
n2
# Observed species:
observed <- sum(freq>0)
observed
# Small sample correction term:
ssc <- ((N-1)/N)
ssc
# Unobserved species:
unobserved <- n1^2/(2*n2)*ssc
unobserved
# Chao estimate:
chao <- observed + unobserved
chao
data("BCI")
data("BCI")
estimateR(BCI)
# check_1 returns TRUE if there is a 1 in vector x
check_1 <- function(x) {
if (1 %in% x)
return(TRUE)
else
return(FALSE)
}
# check_2 returns TRUE if there is a 2 in vector x
check_2 <- function(x) {
if (2 %in% x)
return(TRUE)
else
return(FALSE)
}
all(apply(dune, 1, check_1))
all(apply(dune, 1, check_2))
all(apply(BCI, 1, check_1))
all(apply(BCI, 1, check_2))
# check_1 returns TRUE if there is a 1 in vector x
check_1 <- function(x) {
if (1 %in% x)
return(TRUE)
else
return(FALSE)
}
# check_2 returns TRUE if there is a 2 in vector x
check_2 <- function(x) {
if (2 %in% x)
return(TRUE)
else
return(FALSE)
}
all(apply(dune, 1, check_1))
all(apply(dune, 1, check_2))
dim(BCI)
sum(BCI)
table colSums(BCI)
table(colSums(BCI))
sum(colSums(dune)>0)
check_1_gt1 <- function(x) {
if (sum(x==1)>1)
return(TRUE)
else
return(FALSE)
}
all(apply(dune, 1, check_1_gt1))
all(apply(BCI, 1, check_1_gt1))
(sum(dune==1)>1)
all(apply(dune, 1, check_1_gt1))
?decostand
?vegan::decostand
librry(vegan)
library(vegan)
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
library(RDPutils)
?`RDPutils-package`
install.packages("C:/R_My_New_Package/MyRutils_1.1.tar.gz", repos = NULL, type = "source")
library(RDPutils)
?RDPutils
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
?RDPutils
install.packages("vRveganvr")
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
?RDPutils
library(RDPutils)
?RDPutils
library(RDPutils)
import_otutab_taxa
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
library(phyloseq)
library(RDPutils)
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
library("RDPutils", lib.loc="~/R/win-library/3.3")
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
library(RDPutils)
?RDPutils
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
library(RDPutils)
?RDPutils
library("RDPutils", lib.loc="~/R/win-library/3.3")
uload(RDPutils)
unload(RDPutils)
detach("package::RDPutils", unload = TRUE)
detach("package:RDPutils", unload = TRUE)
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
library(RDPutils)
?RDPutils
install.packages("C:/R_My_Packages/RDPutils_1.3.0.tar.gz", repos = NULL, type = "source")
library(RDPutils)
?RDPutils
library("EcoSimR", lib.loc="~/R/win-library/3.3")
install.packages("C:/Users/John Q/Downloads/EcoSimR_1.00_24Jun2013.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/John Q/Downloads/EcoSimR_1.00_24Jun2013 (1).zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/John Q/Downloads/EcoSimR-master (1).zip", repos = NULL, type = "win.binary")
library(RDPutils)
setwd("C:/R_My_Packages/RDPutils/inst/extdata")
expt <- import_itagger_otutab_taxa("itagger_file.tsv.txt")
expt
sample_names(expt)
taxa_names(expt)
make_otu_names(taxa_names(expt))
make_otu_names(as.numeric(taxa_names(expt)))
