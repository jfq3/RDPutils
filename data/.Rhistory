pro <- procrustes(vare.mds, vare.mds0)
pro
plot(pro)
plot(pro, kind = 2)
library(vegan)
library(MASS)
data(varespec)
vare.dis <- vegdist(varespec)
vare.mds0 <- isoMDS(vare.dis)
vare.mds <- metaMDS(varespec, trace = FALSE)
vare.mds
pro <- procrustes(vare.mds, vare.mds0)
pro
plot(pro)
identify(pro)
structure(pro)
pro
plot(pro, kind = 2)
vare.mds <- metaMDS(varespec, trace = FALSE)
vare.mds
pro <- procrustes(vare.mds, vare.mds0)
pro
plot(pro)
vare.dis <- vegdist(varespec)
vare.mds0 <- isoMDS(vare.dis)
vare.mds <- metaMDS(varespec, trace = FALSE)
vare.mds
pro <- procrustes(vare.mds, vare.mds0)
pro
plot(pro)
stressplot(vare.mds0, vare.dis)
ordiplot(vare.mds0, type = "t")
vare.mds <- metaMDS(varespec, trace = FALSE)
vare.mds
plot(vare.mds, type = "t")
pro <- procrustes(vare.mds, vare.mds0)
pro
plot(pro)
dis <- vegdist(decostand(varespec, "norm"), "euclid") #chord distance
tmp <- wisconsin(sqrt(varespec))
dis <- vegdist(tmp)
vare.mds0 <- isoMDS(dis, trace = 0)
pro <- procrustes(vare.mds, vare.mds0)
pro
plot(pro)
plot(rda(vegdist(tmp, "euclidean")))
pro <- procrustes(tmp, vare.mds0)
pro
plot(pro)
pro <- procrustes(vare.mds0, tmp)
pro
plot(pro)
plot(vare.msd0)
plot(vare.mds0)
ordiplot(vare.mds0, type = "t")
pro <- procrustes(vare.mds0, tmp, symmetric=TRUE)
pro
plot(pro)
pca.tmp <- rda(vegdist(tmp))
plot(pca.tmp)
pro <- procrustes(vare.mds0, tmp, symmetric=TRUE)
pro
plot(pro)
pro <- procrustes(tmp, vare.mds0, symmetric=TRUE)
pro
plot(pro)
plot(pca.tmp, display="sites", type="text")
pro <- procrustes(tmp, vare.mds0, symmetric=TRUE)
pro
plot(pro)
pro <- procrustes(tmp, vare.mds0)
pro
plot(pro)
pro <- procrustes(vare.mds0, tmp)
pro
plot(pro)
identify(pro, "sp", labels=rownames(tmp))
identify(pro, "sp", labels=rownames(pro))
pro
vare.mds0
identify(vare.mds0, "sp", labels=rownames(vare.mds0))
identify(vare.mds0, "sp", labels=row.names(vare.mds0))
plot(pro, kind = 2)
identify(vare.mds0, "sp", labels=row.names(vare.mds0))
plot(vare.mds0)
plot(vare.mds0)
vare.mds0 <- isoMDS(dis, trace = 0)
tmp <- wisconsin(sqrt(varespec))
dis <- vegdist(tmp)
vare.mds0 <- isoMDS(dis, trace = 0)
plot(vare.mds0)
are.mds0
vare.mds0
plot(vare.mds0)
data(BCI)
shnam <- make.cepnamaes(names(BCI))
shname[1:5]
shnam <- make.cepnames(names(BCI))
shname[1:5]
shnam[1:5]
pro <- procrustes(vare.mds0, tmp)
pro
plot(pro)
identify(pl, "sp", labels=rownames(vare,mds0))
plot(vare.mds0)
pl <- plot(vare.mds0, display="sites")
identify(pl, "sp", labels=rownames(vare,mds0))
mod <- decorana(BCI)
plot(mod)
shnam <- make.cepnames(names(BCI))
shnam[1:5]
pl<- plot(mod, display="species")
identify(pl, "species", labels=shnam)
identify(pl, "species", labels=shnam, toleranace=0.1)
pro
structure(pro)
str(pro)
pro$X
pl <- pro$X[ ,1:2]
pl
row.names(pl)
plot(pro)
identify(pl, labels=row.names(pl))
str)pro
str(pro)
plx <- pro$Yrot[ , 1:2]
plx
identify(plx, labels=row.names(plx))
pro <- procrustes(vare.mds0, tmp)
pro
plot(pro)
pro <- procrustes(vare.mds0, tmp)
pro
plot(pro)
pl <- pro$X[ ,1:2]
pl
pl <- pro$X[ ,1:2]
identify(pl, labels=row.names(pl))
data(varespec)  #Load sample data; rows are sites, columns are species
vare.dis <- vegdist(varespec)  #Calculate distance matrix; default is Bray-Curtis
vare.mds0 <- isoMDS(vare.dis)  #Calculate NMDS using default parameters
stressplot(vare.mds0, vare.dis)  #  Draw Shepard plot of ordination distance on
ordiplot(vare.mds0, type = "t")  #Plot NMDS
vare.mds <- metaMDS(varespec, trace = FALSE)  #Use alternate function which makes
# several random starts
vare.mds
plot(vare.mds, type = "t")  # Plot this second NMDS
data(varechem)  #Load sample data of environmental parameters for each site
#   Scale the data and determine which distance index best separates communities
#   along known environmental gradients, uisng rank correlation as the default.
rankindex(scale(varechem), varespec, c("euc", "man","bray", "jac", "kul"))
dis.chord <- vegdist(decostand(varespec, "norm"), "euclid") #chord distance
dis.hel <- vegdist(decostand(varespec, "hell"), "euclidean") #hellinger distance
tmp <- wisconsin(sqrt(varespec))  #transform environmental data
dis <- vegdist(tmp)  #Claclulate default Bray-Curtis distance matrix on transformed data.
vare.mds0 <- isoMDS(dis, trace = 0)  #Calcluate NMDS for environmental data.
pro <- procrustes(vare.mds, vare.mds0)  #Compare ordinations for species and environmenta
#
pro
plot(pro)
plot(pro, kind = 2)
plot(pro)
pl <- pro$X[ ,1:2]
identify(pl, labels=row.names(pl))
plot(vare,mds, display="sites", type="text")
plot(vare.,mds, display="sites", type="text")
plot(vare.mds, display="sites", type="text")
plot(vare.mds, display="species", type="text")
demo()
demo(vegan)
library(vegan)
demo(vegan)
library(MASS)
demo(MASS)
MASS
install.packages("plyr")
source("http://bioconductor.org/biocLite.R")
biocLite("phyloseq")
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
library("phyloseq", lib.loc="C:/Users/John Q/Documents/R/win-library/2.15")
detach("package:permute", unload=TRUE)
detach("package:phyloseq", unload=TRUE)
detach("package:picante", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:vegan", unload=TRUE)
detach("package:nlme", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:ade4", unload=TRUE)
detach("package:ape", unload=TRUE)
source("http://bioconductor.org/biocLite.R")
biocLite("phyloseq")
install.packages("C:/Users/John Q/Desktop/phyloseq_1.3.0.zip", repos = NULL)
library("phyloseq", lib.loc="C:/Users/John Q/Documents/R/win-library/2.15")
library(devtools)
library(picante)
library(BiodiversityR)
data(com)
data(BCI)
com <- BCI
no.seqs <- rowSums(com)
no.seqs
sing <- com==1
sing
no.sing <- apply(sing, 1, sum)
no.sing
rowSums(com==1)
no.sing.2 <-rowSums(com==1)
identical(no.sing, no.sing.2)
sing <- com==1
no.sing <- apply(sing, 1, sum)
no.sing.2 <-rowSums(com==1)
identical(no.sing, no.sing.2)
class(no.sing)
class(no.sing.2)
no.sing.2 <- as.integer(no.sing.2
)
identical(no.sing, no.sing.2)
temp <- no.sing==no.sing.2
table(temp)
class(no.sing)
class(no.sing.2)
no.sing==no.sing.2
min(no.sing==no.sing.2)
library(vegan)
library(phyloseq)
# Need to clean the zeros from GlobalPatterns:
GP <- GlobalPatterns
GP <- prune_species(taxa_sums(GP)>0, GP)
data(GlobalPatterns)
GP <- GlobalPatterns
GP <- prune_species(taxa_sums(GP)>0, GP)
# # Add "human" variable to GP
human <- get_variable(GP, "SampleType") %in%
c("Feces", "Mock", "Skin", "Tongue")
names(human) <- sample_names(GP)
sample_data(GP)$human <- human
top.TaxaGroup <- sort(
tapply(taxa_sums(GP), tax_table(GP)[, "Phylum"], sum, na.rm = TRUE),
decreasing = TRUE)
top.TaxaGroup <- top.TaxaGroup[top.TaxaGroup > 1*10^6]
GP <- subset_species(GP, Phylum %in% names(top.TaxaGroup))
gpca <- ordinate(GP, "CCA")
p1 <- plot_ordination(GP, gpca, "species", color="Phylum")
# Re-draw this as topo without points, and facet
library("ggplot2")
p1 <- ggplot(p1$data, p1$mapping) + geom_density2d() + facet_wrap(~Phylum)
p53 <- p1 + geom_point(data=subset_ord_plot(p1, 1.0, "square"), size=1)
print(p53)
install.packages(c("ape", "BiodiversityR", "colorspace", "devtools", "dichromat", "digest", "FactoMineR", "igraph", "igraph0", "knitr", "maptools", "Matrix", "proto", "rgl", "sp", "spdep", "vegan"))
install.packages(c("ape", "BiodiversityR", "colorspace", "devtools",
install.packages(c("ape", "BiodiversityR", "colorspace", "devtools", "dichromat", "digest", "FactoMineR", "igraph", "igraph0", "knitr", "maptools", "Matrix", "proto", "rgl", "sp", "spdep", "vegan"))
source("http://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library("foreign", lib.loc="C:/Program Files/R/R-2.15.2/library")
detach("package:foreign", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
biocLite("phyloseq")
com <- t(com)
com.chao <- vegdist(com, "chao")
pca <- rda(com.chao)
plot(pca, display="sites", scaling=1, type="points")
com.chao <- vegdist(com, "chao")
source("http://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library("KernSmooth", lib.loc="C:/Program Files/R/R-2.15.3/library")
new_otu = otu_table(as(pfizer.expt@otuTable, "matrix"), taxa_are_rows=FALSE)
vignette("indicspeciesTutorial", package="indicspecies")
library(indicspecies)
install.packages("indicspecies")
install.packages("phangorn")
library("abind", lib.loc="C:/Users/John Q/Documents/R/win-library/3.0")
detach("package:abind", unload=TRUE)
library("ade4", lib.loc="C:/Users/John Q/Documents/R/win-library/3.0")
detach("package:ade4", unload=TRUE)
library(indicspecies)
library(indicspecies)
install.packages("indicspecies")
library(indicspecies)
install.packages("indicspecies")
install.packages("indicspecies")
library(indicspecies)
library(phyloseq)
library(phyloseq)
library(ape)
library(phyloseq)
install.packages(c("ade4", "aqp", "boussinesq", "car", "coin", "colorspace", "ctv", "deldir", "DEoptim", "deSolve", "dynlm", "earth", "ellipse", "fBasics", "fields", "forecast", "gam", "geometry", "hexbin", "Hmisc", "HydroMe", "igraph0", "knitr", "lme4", "lmtest", "mclust", "metacom", "mvpart", "oce", "openair", "plotrix", "princurve", "prodlim", "quadprog", "quantreg", "RcppArmadillo", "rgdal", "rgeos", "rgl", "RMAWGEN", "sensitivity", "sp", "spam", "SparseM", "spatstat", "surveillance", "tfplot", "timeDate", "timeSeries", "tseries", "unmarked", "VGAM"))
source("http://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library("KernSmooth", lib.loc="C:/Users/John Q/Documents/R/win-library/2.15")
remove.packages("KernSmooth", lib="C:/Program Files/R/R-2.15.3/library")
library("cluster", lib.loc="C:/Users/John Q/Documents/R/win-library/2.15")
remove.packages("cluster", lib="C:/Program Files/R/R-2.15.3/library")
library("foreign", lib.loc="C:/Users/John Q/Documents/R/win-library/2.15")
remove.packages("foreign", lib="C:/Program Files/R/R-2.15.3/library")
remove.packages("KernSmooth", lib="C:/Program Files/R/R-2.15.3/library")
remove.packages("KernSmooth", lib="C:/Program Files/R/R-2.15.3/library")
library(vegan)
ref(vegan)
citation("vegan")
library(phyloseq)
citation("phyloseq")
library(DECIPHER)
source("http://bioconductor.org/biocLite.R")
biocLite("DECIPHER")
citation("DECIPHER")
?adonis
library(labdsv)
citation(:labdsv)
citation("labdsv")
library(BiodiversityR)
citation("BiodiversityR")
library(DECIPHER)
citation(DECIPHER)
citation("DECIPHER")
library(vegan)
citation)"vegan"
citation("vegan")
library(vegan)
?betadisper
?vegan
?ordimedian
?mrpp
?anosim
?vegan
?betadiver
?capscale
?identical
library(ggplot)
data(BOD)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
data(BOD)
p <- ggplot2(BOD, aes(x=Time, y=demand)) + geom_line()
p <- ggplot(BOD, aes(x=Time, y=demand)) + geom_line()
p
p <- ggplot(BOD, aes(x=Time, y=demand)) + geom_line() + geom_point()
p
p + theme_bw()
theme_bw()
library(phyloseq)
version("phyloseq")
package_version("phyloseq")
packageVersion("phyloseq")
packageVersion("vegan")
verson()
chooseCRANmirror(graphics = getOption("menu.graphics"))
?Memory
memory.limit
memory.limit()
update.packages(checkBuilt=TRUE, ask=FALSE)
source("http://bioconductor.org/biocLite.R")
biocLite("phyloseq")
install.packages("devtools")
library("devtools")
install_github("phyloseq", "joey711")
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
install_github("phyloseq", "joey711")
library(phyloseq)
phyloseq
rm(phyloseq)
rd("phyloseq")
rm("phyloseq")
library(ape)
detach("package:ape", unload=TRUE)
detach("package:phyloseq", unload=TRUE)
warnings()
source("http://bioconductor.org/biocLite.R")
devel = "http://bioconductor.org/packages/2.13/bioc"
biocLite("phyloseq", siteRepos = devel, suppressUpdates = TRUE, type = "source")
library("phyloseq", lib.loc="C:/Users/John Q/Documents/R/win-library/3.0")
library("phyloseq")
packageVersion("phyloseq")
kostic = microbio_me_qiime(1457)
filepath = system.file("extdata", "study_1457_split_library_seqs_and_mapping.zip", package="phyloseq")
kostic = microbio_me_qiime(filepath)
filepath
filepath = "~/Downloads/study_1457_split_library_seqs_and_mapping.zip"
kostic = microbio_me_qiime(filepath)
filepath = system.file("extdata", "study_1457_split_library_seqs_and_mapping.zip",
package = "phyloseq")
kostic = microbio_me_qiime(filepath)
detach("package:phyloseq", unload=TRUE)
library("phyloseq", lib.loc="C:/Users/John Q/Documents/R/win-library/3.0")
packageVersion("phyloseq")
library("phyloseq", lib.loc="C:/Users/John Q/Documents/R/win-library/3.0")
packageVersion("phyloseq")
library("phyloseq", lib.loc="C:/Users/John Q/Documents/R/win-library/3.0")
library(BiodiveristyR)
library(BiodiversityR)
?citation
citation(package="BiodiversityR")
citation(pacage="DECIPHER")
citation(package="DECIPHER")
library(phyloseq)
package_version(phyloseq)
packageVersion(pkg=phyloseq)
library(phyloseq)
install.packages(c("ape", "biom", "devtools", "doParallel", "e1071", "effects", "evaluate", "foreach", "foreign", "geometry", "Hmisc", "httr", "igraph", "iterators", "lattice", "maptools", "markdown", "mgcv", "multcomp", "mvtnorm", "nlme", "picante", "plyr", "Rcmdr", "Rcpp", "RcppArmadillo", "rpart", "scatterplot3d", "sp", "spam", "tcltk2", "xtable", "zoo"))
install.packages("foreach")
install.packages("zoo")
install.packages("Rcmdr")
source("http://bioconductor.org/biocLite.R")
biocLite("phyloseq")
?Biocupgrade
?BiocUpgrade
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLIte("phyloseq")
biocLite("phyloseq")
biocLite("BiocInstaller")
library(phyloseq)
source('C:/R_My_Functions/RDP_utils.R')
shell$ R CMD INSTALL -l RDP_utils
shell$ R CMD INSTALL -l C:/R_My_Functions/RDP_utils
shell$ R CMD install RDP_utils
shell$ R CMD INSTALL RDP_utils
R CMD INSTALL RDP_utils
CMD INSTALL RDP_utils
source("http://bioconductor.org/biocLite.R")
biocLite("phyloseq")
install.packages(c("BiodiversityR", "car", "evaluate", "fields", "markdown", "memoise", "multcomp", "mvtnorm", "RcppArmadillo", "reshape", "reshape2", "RgoogleMaps", "RJSONIO", "scales", "sem"))
source("http://bioconductor.org/biocLite.R")
?Biocupgrade
?BiocUpgrade
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
install.packages("C:/Users/John Q/Downloads/phyloseq_1.8.1.zip", repos = NULL)
library("phyloseq")
install.packages("scales")
library("phyloseq")
install.packages("C:/Users/John Q/Downloads/DESeq2_1.4.5.zip", repos = NULL)
library("phyloseq")
biocLite("BiocGenerics")
install.packages("C:/Users/John Q/Downloads/BiocGenerics_0.10.0.zip", repos = NULL)
library("phyloseq")
library("BioGenerics")
library("BiocGenerics")
library("phyloseq")
library("phyloseq")
warnings()
install.packages("C:/Users/John Q/Downloads/geneplotter_1.42.0.zip", repos = NULL)
library("phyloseq")
warnigs()
warnings()
install.packages("roxygen2")
library(RDPutils)
repseq.file <- system.file("extdata", "all_seq_complete.clust_rep_seqs.fasta", package="RDPutils")
rep.seqs <- get_repseq_IDs_from_fasta(repseq_file = repseq.file)
rep.seqs
data(rock)
rock
head(rock)
install.packages("C:/delete_me/phyloseq_1.8.2.zip", repos = NULL)
library("phyloseq", lib.loc="C:/Users/John Q/Documents/R/win-library/3.1")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")     ## R version 2.15 or later
source("http://bioconductor.org/packages/2.14/biocLite.R")
source("http://bioconductor.org/packages/2.15/biocLite.R")
b
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("BiocUpgrade")
library(BiocLite)
library(BioInstaller)
detach("package:BiocInstaller", unload=TRUE)
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")     ## R version 2.15 or later
?biocLite
biocValid()
library(phyloseq)
rich_dense_biom = system.file("extdata", "rich_dense_otu_table.biom", package = "phyloseq")
rich_sparse_biom = system.file("extdata", "rich_sparse_otu_table.biom", package = "phyloseq")
min_dense_biom = system.file("extdata", "min_dense_otu_table.biom", package = "phyloseq")
min_sparse_biom = system.file("extdata", "min_sparse_otu_table.biom", package = "phyloseq")
treefilename = system.file("extdata", "biom-tree.phy", package = "phyloseq")
refseqfilename = system.file("extdata", "biom-refseq.fasta", package = "phyloseq")
rich.dense <- import_biom(rich_dense_biom, treefilename, refseqfilename, parseFunction = parse_taxonomy_greengenes)
rich.dense
tax_table(rich.dense)
library(phyloseq)
my.tree <- read_tree("rep.tree.nwk")
my.tree
setwd("C:/R_My_Packages/RDPutils/inst/extdata")
my.tree <- read_tree("rep.tree.nwk")
my.tree
class(my.tree)
library(RDPutils)
my.in.file <- system.file("extdata", "fixrank_classified.txt", package="RDPutils")
my.tax.table <- make_tax_table(in_file = my.in.file, confidence=0.5)
head(my.tax.table)
setwd("C:/R_My_Packages/RDPutils/data")
load("otu.rda")
my.otu <- otu_table(as.matrix(t(otu)), taxa_are_rows=TRUE, errorIfNULL=TRUE)
my.expt <- phyloseq(my.otu, my.tax.table, my.tree)
my.expt
install.packages("C:/R_My_Packages/RDPutils_1.0.tar.gz", repos = NULL, type = "source")
