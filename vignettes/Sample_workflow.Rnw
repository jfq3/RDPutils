\documentclass{article}

\usepackage[margin=1in]{geometry} % 1 inch margins all around
\parindent=0in
\parskip=12pt % this is variable, choose the number you want
\usepackage{color}
\definecolor{blue}{rgb}{0,0,0.5}
\usepackage[colorlinks]{hyperref}
\hypersetup{ colorlinks,
 linkcolor=blue,
 urlcolor=blue, }

\title{Example Workflows for the Package RDPutils}
\author{John Quensen}
\date{June 30, 2015}
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Vignette Title}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle

\section*{Introduction}
The package provides means to construct phyloseq objects from the output of RDP tools for clustering and classfying DNA sequences from high-throughput amplicon sequencing projects. 

The Ribosomal Database Project (RDP) provides both web-based and command line tools for processing rRNA gene sequences from Bacteria, Archae, and Fungi as well as functional genes.  Web-based tools and tutorials for using them are available at \href{http://rdp.cme.msu.edu/index.jsp}{http://rdp.cme.msu.edu/index.jsp}.  The command line tools are available at \href{https://github.com/rdpstaff/RDPTools}{https://github.com/rdpstaff/RDPTools}. Processing can take either of two approaches.  In the "supervised" approach, sequences from multiple samples are binned by classifying them using a database for Bacteria or Archae or Fungi, or a user's own database, and further processing is usually done in a spreadsheet program.  In the "unsupervised" approach, sequences are clustered into OTUs based on their degree of similarity.   RDP provides additional tools to parse the cluster files into OTU tables that can be imported into R, and to retrieve representative sequences for each cluster.  

Phyloseq is an R/Bioconductor package that includes a variety of wrappers for quick exploratory data analysis of sequencing data, but perhaps its most convenient feature is that it provides a means of rapid and flexible sub-setting of data from a large experiment.  A phyloseq object has slots for an OTU table, a classification table, a sample data table, and a tree of the sequences representing each OTU.  I recommend phyloseq because it organizes all data for an experiment and R because it provides a flexible means of analyzing that data.

The functions in this package reformat RDP output so that it is possible to fill phyloseq slots.  In the case of the supervised approach, the RDP classifier result is reformatted directly into a phyloseq object containing an OTU table and a classification table.  For the unsupervised approach, the OTU table can be the result from the RDP R-formatter tool, or from a function in this package. The key to filling the classification table and tree slots is to rename the representative sequences to correspond to the OTU names; this package includes functions to do this.  Once renamed, the representative sequences can be classified and treed, and the results used to fill phyloseq classification table and tree slots.  For either approach, a sample data table is most easily constructed in a spreadsheet program.

Below are example workflows for both supervised and unsupervised approaches.

<<echo=FALSE, results=hide>>=
library(RDPutils)
@
\subsection*{A Note:}
Input to some of the functions in this package are text files read from disk, normally in practice from your R working directory.  But for the examples to work, it is necessary to use the \texttt{system.file} command to get the path plus file name in the R installation.   This is assigned to a variable, and that variable is used as a function argument in place of what a user would normally enter enclosed in parentheses.  For example, while the following works as an example:
<<eval=FALSE>>=
clstr.file <- system.file("extdata", "all_seq_complete.clust",
                          package="RDPutils")
otu <- clstr2otu(clstr_file=clstr.file, dist=0.03, OutFile=TRUE,
                 file_name= "dist_03.clust")
@
a user would normally type
<<eval=FALSE>>=
otu <- clstr2otu(clstr_file = "all_seq_complete.clust", dist = 0.03,
                 OutFile = FALSE, file_name = "dist_03.clust")
@
\section*{Workflow for Cluster Results}
RDP's unsupervised method involves aligning rRNA sequences using the structure-aware Infernal aligner, calculating distances between sequences, and then clustering them, by default, by the complete linkage method.  The result is a large "clust" file giving the numbers and names of every sequence in every cluster for every sample for several distances, from 0 to 0.15 by default. The R-formatter tool parses the cluster file into tab-delimited OTU tables for each distance with samples as rows and OTUs as columns.  These can be easily imported into R with the base function \texttt{read.table}.

Cluster files may also be parsed into an OTU table for a specific distance with \texttt{clstr2otu}.  This function also gives the option of excising the portion of the larger cluster file that corresponds to the same specific distance, as in this example: 
<<>>=
library(RDPutils)
clstr.file <- system.file("extdata", "all_seq_complete.clust", 
                          package="RDPutils")
otu <- clstr2otu(clstr_file=clstr.file, dist=0.03, 
                 OutFile=TRUE, file_name= "dist_03.clust")
otu[ , 1:5] 
@ 
Here, \texttt{clstr.file} is the name of the cluster file, retrieved from the examples provided for RDPutils.  Again, normally, the user would enter the cluster file name \texttt{all\_seq\_complete.clust} within quotation marks in its place.  Since \texttt{OutFile} is \texttt{TRUE}, a cluster file for the distance 0.03 is written to the file \texttt{dist\_03.clust}.  The result, \texttt{otu}, is of course the OTU table.  The sample names have been simplified by removing common prefixes and suffixes introduced by the RDP pipeline.

Compare this to importing the text file from the R-formatter:
<<>>=
rformatfile <- system.file("extdata", "rformat_dist_0.03.txt", 
                           package="RDPutils")
otu.rdp <- read.table(rformatfile, header=TRUE, row.names=1, 
                      sep="\t")
otu.rdp[ , 1:5]
@
The result is the same, except for the order of the samples, which of course can be sorted:
<<>>=
otu.rdp <- otu.rdp[sort(rownames(otu.rdp)), ]
otu.rdp[ , 1:5]
@
In order to assign taxonomy to the OTUs, it is necessary to rename the representative sequences with the OTU names.  After mid-2013, the tools to retrieve representative sequences include the cluster (or OTU) number in the fasta IDs.
If retrieved with the on-line tool, they have the form:\\
\texttt{>HC9DO0P01BCTC4 cluster\_id=1,size=2}\\
If retrieved with the command line tool in RDPTools, they have the form:\\
\texttt{>HC9DO0P01BCTC4 prefered=false,cluster=0,clustsize=2}\\
\texttt{>FTJQVTM02FQW3E  prefered=false,cluster=1,clustsize=7,maxDist=0.02917,minSumSquare=0.00191}\\
In these cases, it is possible to make an association between the representative sequence IDs and the OTU names with the function \texttt{assoc\_repseq\_IDs\_with\_otus\_by\_fasta}:
<<keep.source=TRUE>>=
repseq.file <- system.file("extdata", 
               "all_seq_complete.clust_rep_seqs.fasta", 
                package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_fasta(repseq_file = 
                                                     repseq.file)
head(assoc.table)
@
If the fasta IDs of the representative sequences do not meet the conditions above, the association between OTUs and representative sequences can be obtained from the cluster file.  This method is more involved and takes longer to run.  First it is necessary to get a list of the machine names of the representative sequences and use that list as input to  the function \texttt{assoc\_repseq\_IDs\_with\_otus\_by\_clstr}:
<<>>=
repseq.file <- system.file("extdata", 
                           "all_seq_complete.clust_rep_seqs.fasta", 
                           package="RDPutils")
rep.seqs <- get_repseq_IDs_from_fasta(repseq_file = repseq.file)
clstr <- system.file("extdata", "dist_03.clust", package="RDPutils")
assoc.table <- assoc_repseq_IDs_with_otus_by_clstr(clstr_file=clstr, 
                                                   rep_seqs=rep.seqs)
head(assoc.table)
@
Once the \texttt{assoc.table} is made, it can be used to rename the representative sequences.  But first, it is necessary to trim the IDs of the representative sequences to contain only the machine names.
<<>>=
repseq.file <- system.file("extdata", 
                           "all_seq_complete.clust_rep_seqs.fasta", 
                           package="RDPutils")
trim_fasta_names(repseq_file = repseq.file, 
                 trimmed_names = "names_trimmed.fasta", strip = FALSE)
rename_fasta(in_file = "names_trimmed.fasta", out_file = "renamed.fasta", 
             rename_table = assoc.table)
@
After renaming, the representative sequences can be classified and the detailed fixrank format from the classifier converted into a phyloseq \texttt{tax\_table} with the function \texttt{make\_tax\_table}.
<<>>=
my.in.file <- system.file("extdata", "fixrank_classified.txt", package="RDPutils")
my.tax.table <- make_tax_table(in_file = my.in.file, confidence=0.5)
head(my.tax.table)
@
The renamed representative sequences can also be treed, with FastTree for example, and the result included in a phyloseq object.  Once this is done, a phyloseq object can be created.  In the example below, sam.data is a simple dataframe including information about each sample, and \texttt{rep.tree.nwk} is a tree of the renamed representative sequences in Newick format.  Nexus format is also acceptable.  The \texttt{read\_tree} function converts either to a phylo class object.
<<>>=
data(sam.data)
sam.data
rep.tree <- system.file("extdata", "rep.tree.nwk", package="RDPutils")
my.tree <- read_tree(rep.tree)
my.otu <- otu_table(as.matrix(t(otu)), taxa_are_rows=TRUE, errorIfNULL=TRUE)
my.data <- sample_data(sam.data)
my.expt <- phyloseq(my.otu, my.tax.table, my.data, my.tree)
my.expt
@
\section*{Workflow for Classifier Results}
The RDP classifier can be used for multiple samples and  reports results in two different formats -- a hierarchical output and a sequence--by--sequence  or detailed output.  When using the command line classifier, the sequence--by--sequence output is given by the \texttt{-o} parameter (required) and the hierarchical output is given by the \texttt{-h} parameter.  The function \texttt{hier2phyloseq} converts hierarchical output for multiple samples to a phyloseq object containing an OTU table and a taxonomy table.  It does not work for a single sample.  It is best used with the output from the command line classifier because then the results can be binned according to confidence level by setting the format parameter to  \texttt{filterbyconf}.  For example, if sequences are identified to order level but not to family, they are assigned to family `unclass\_order,' etc.  An appropriate classifier command is:\\ \\
\texttt{java -Xmx1g -jar C:/rdp\_classifier\_2.7/dist/classifier.jar classify -g fungallsu -c 0.5 \\-f filterbyconf -o test\_classified.txt -h test\_hier.txt Sample\_1.fasta Sample\_2.fasta}\\ \\issued from the directory containing the fasta files.

As an example:
<<>>=
hier.file <- system.file("extdata", "test_hier.txt", package="RDPutils")
expt <- hier2phyloseq(hier_file=hier.file)
expt
@
This example is for 28S rRNA gene sequences and the aim is to analyze fungal communities.  Domains other than fungi have been included in the data base to improve classification.  The domains represented in the data can be determined thus:
<<>>=
rank_names(expt)
unique(tax_table(expt)[ ,"Domain"])
@
The data can be subset to include only the fungal sequences thus:
<<>>=
fungi <- subset_taxa(expt, Domain=="Fungi")
fungi
@
and the percentage of non-fungal sequences is determined as:
<<>>=
expt.sum <- sum(otu_table(expt))
fungi.sum <- sum(otu_table(fungi))
100*((expt.sum-fungi.sum)/expt.sum)
@

\end{document}